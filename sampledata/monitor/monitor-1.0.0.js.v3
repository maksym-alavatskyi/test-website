!function() {(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ClickTaleMonitor = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Hub_1 = require("../eventHubs/Hub");
var Container_1 = require("../ioc/Container");
var IdMetric_1 = require("../metrics/IdMetric");
var Configuration_1 = require("../config/Configuration");
var Disposer_1 = require("../services/disposer/Disposer");
var MetricsReader_1 = require("../metrics/MetricsReader");
var VersionMetric_1 = require("../metrics/VersionMetric");
var LocationMetric_1 = require("../metrics/LocationMetric");
var MetricsPromise_1 = require("../metrics/MetricsPromise");
var JSONSerializer_1 = require("../messaging/JSONSerializer");
var ProjectIdMetric_1 = require("../metrics/ProjectIdMetric");
var TimeOnPageMetric_1 = require("../metrics/TimeOnPageMetric");
var MetricAggregator_1 = require("../metrics/MetricAggregator");
var ScrollReachMetric_1 = require("../metrics/ScrollReachMetric");
var IdGenerator_1 = require("../services/idGenerator/IdGenerator");
var JSErrorCountMetric_1 = require("../metrics/JSErrorCountMetric");
var CookiesService_1 = require("../services/cookies/CookiesService");
var XhrTransportChannel_1 = require("../transport/XhrTransportChannel");
var DistributionService_1 = require("../distribution/DistributionService");
var UserAgentService_1 = require("../services/userAgent/UserAgentService");
var QueryStringSerializer_1 = require("../messaging/QueryStringSerializer");
var ImageTransportChannel_1 = require("../transport/ImageTransportChannel");
var DocumentReferrerMetric_1 = require("../metrics/DocumentReferrerMetric");
var PeriodicalNotifierRule_1 = require("../metrics/PeriodicalNotifierRule");
var BeaconTransportChannel_1 = require("../transport/BeaconTransportChannel");
var VisitIdentificationMetric_1 = require("../metrics/VisitIdentificationMetric");
var ReturningOrNewVisitorMetric_1 = require("../metrics/ReturningOrNewVisitorMetric");
var DOMLContentLoadedTimeMetric_1 = require("../metrics/DOMLContentLoadedTimeMetric");
var VisitorIdentificationMetric_1 = require("../metrics/VisitorIdentificationMetric");
var PageViewIdentificationMetric_1 = require("../metrics/PageViewIdentificationMetric");
var IdentificationService_1 = require("../services/identification/IdentificationService");
var EngagementTimeAggregatorMetric_1 = require("../metrics/EngagementTimeAggregatorMetric");
var App = (function () {
    function App(projectId) {
        var _this = this;
        this.projectId = projectId;
        this.bootstrap(function () {
            if (_this.tryRegisterComponents()) {
                _this.start();
            }
        });
    }
    App.prototype.bootstrap = function (callback) {
        if (!App.isMonitoring) {
            if (/complete|interactive/.test(document.readyState)) {
                callback();
            }
            document.addEventListener("DOMContentLoaded", callback, false);
        }
    };
    App.prototype.start = function () {
        var metricAggregator;
        var disposer = App.container.resolve("Disposer");
        App.container.resolve("Hub");
        App.container.resolve("MetricsReader");
        metricAggregator = App.container.resolve("MetricAggregator");
        disposer.metricAggregator = metricAggregator;
        App.container.resolve("DistributionService");
        App.isMonitoring = true;
    };
    App.prototype.tryRegisterComponents = function () {
        var _this = this;
        var userAgentService = new UserAgentService_1.UserAgentService();
        if (userAgentService.isBrowserSupported) {
            App.container = new Container_1.Container();
            App.container.register("Hub", function (c) { return new Hub_1.Hub(userAgentService); });
            App.container.registerInstance(userAgentService);
            App.registerTransportChannels(userAgentService.userAgent, Configuration_1.Configuration);
            App.container.register("IdGenerator", function (c) { return new IdGenerator_1.IdGenerator(); });
            App.container.register("VersionMetric", function (c) { return new VersionMetric_1.VersionMetric(); });
            App.container.register("LocationMetric", function (c) { return new LocationMetric_1.LocationMetric(); });
            App.container.register("CookiesService", function (c) { return new CookiesService_1.CookiesService(); });
            App.container.register("ProjectIdMetric", function (c) { return new ProjectIdMetric_1.ProjectIdMetric(_this.projectId); });
            App.container.register("DocumentReferrerMetric", function (c) { return new DocumentReferrerMetric_1.DocumentReferrerMetric(); });
            App.container.register("IdMetric", function (c, id) { return new IdMetric_1.IdMetric(id); }).asTransient();
            App.container.register("ScrollReachMetric", function (c) { return new ScrollReachMetric_1.ScrollReachMetric(c.resolve("Hub")); });
            App.container.register("JSErrorCountMetric", function (c) { return new JSErrorCountMetric_1.JSErrorCountMetric(c.resolve("Hub")); });
            App.container.register("PeriodicalNotifierRule", function (c) { return new PeriodicalNotifierRule_1.PeriodicalNotifierRule(Configuration_1.Configuration); });
            App.container.registerNamed(Configuration_1.Configuration.transport.mainChannel, "serializer", function (c) { return new JSONSerializer_1.JSONSerializer(); });
            App.container.register("DOMLContentLoadedTimeMetric", function (c) { return new DOMLContentLoadedTimeMetric_1.DOMLContentLoadedTimeMetric(performance.timing); });
            App.container.register("TimeOnPageMetric", function (c) { return new TimeOnPageMetric_1.TimeOnPageMetric(c.resolve("Hub"), performance.timing); });
            App.container.registerNamed(Configuration_1.Configuration.transport.terminalChannel, "serializer", function (c) { return new QueryStringSerializer_1.QueryStringSerializer(); });
            App.container.register("Disposer", function (c) { return new Disposer_1.Disposer(c.resolve("Hub"), c, Configuration_1.Configuration, _this); }).ownedExternally();
            App.container.register("MetricsPromise", function (c) { return new MetricsPromise_1.MetricsPromise(c.resolve("MetricAggregator")); });
            App.container.register("VisitIdentificationMetric", function (c) { return new VisitIdentificationMetric_1.VisitIdentificationMetric(c.resolve("IdentificationService")); });
            App.container.register("ReturningOrNewVisitorMetric", function (c) { return new ReturningOrNewVisitorMetric_1.ReturningOrNewVisitorMetric(c.resolve("IdentificationService")); });
            App.container.register("VisitorIdentificationMetric", function (c) { return new VisitorIdentificationMetric_1.VisitorIdentificationMetric(c.resolve("IdentificationService")); });
            App.container.register("PageViewIdentificationMetric", function (c) { return new PageViewIdentificationMetric_1.PageViewIdentificationMetric(c.resolve("IdentificationService")); });
            App.container.register("EngagementTimeAggregatorMetric", function (c) { return new EngagementTimeAggregatorMetric_1.EngagementTimeAggregatorMetric(c.resolve("Hub"), Configuration_1.Configuration, performance.timing); });
            App.container.register("DistributionService", function (c) { return new DistributionService_1.DistributionService(_this, Configuration_1.Configuration, c.resolve("Hub"), c, c.resolve("Disposer")); });
            App.container.register("IdentificationService", function (c) { return new IdentificationService_1.IdentificationService(c.resolve("IdGenerator"), c.resolve("CookiesService"), Configuration_1.Configuration); });
            App.container.register("MetricAggregator", function (c) {
                var metricArray = Configuration_1.Configuration.metrics.providers.map(function (metric) { return c.resolve(metric); });
                metricArray = metricArray.concat([
                    c.resolve("VersionMetric"),
                    c.resolve("LocationMetric"),
                    c.resolve("ProjectIdMetric"),
                    c.resolve("DocumentReferrerMetric"),
                    c.resolve("VisitIdentificationMetric"),
                    c.resolve("DOMLContentLoadedTimeMetric"),
                    c.resolve("VisitorIdentificationMetric"),
                    c.resolve("PageViewIdentificationMetric")
                ]);
                return new MetricAggregator_1.MetricAggregator(metricArray, c.resolve("Hub"), Configuration_1.Configuration, c.resolveFactory("IdMetric"), c.resolve("Disposer"));
            });
            App.container.register("MetricsReader", function (c) {
                var promise = c.resolve("MetricsPromise");
                return new MetricsReader_1.MetricsReader([
                    promise,
                    c.resolve("PeriodicalNotifierRule")], c.resolve("Hub"), c.resolve("MetricAggregator"), c.resolve("DistributionService"), promise, c.resolve("IdentificationService"));
            });
            return true;
        }
        return false;
    };
    App.prototype.shutdown = function () {
        this.dispose(true);
    };
    App.prototype.dispose = function (shutdown) {
        var disposer = App.container.resolve("Disposer");
        disposer.dispose(shutdown);
    };
    App.prototype.stop = function () {
        App.isMonitoring = false;
    };
    App.prototype.isMonitoring = function () {
        return App.isMonitoring;
    };
    App.registerTransportChannels = function (userAgent, config) {
        var transportConfig = config.transport;
        var browserType = userAgent.browser.type;
        var transportChannelTerminal = userAgent.supports.sendBeacon ? BeaconTransportChannel_1.BeaconTransportChannel : ImageTransportChannel_1.ImageTransportChannel;
        App.container.registerNamed(transportConfig.terminalChannel, "channel", function (c, settings) { return new transportChannelTerminal(settings); }).ownedExternally();
        App.container.registerNamed(transportConfig.mainChannel, "channel", function (c, settings) { return new XhrTransportChannel_1.TransportChannelXhr(settings); }).asTransient().ownedExternally();
    };
    App.isMonitoring = false;
    return App;
})();
exports.App = App;

},{"../config/Configuration":4,"../distribution/DistributionService":5,"../eventHubs/Hub":7,"../ioc/Container":8,"../messaging/JSONSerializer":13,"../messaging/QueryStringSerializer":14,"../metrics/DOMLContentLoadedTimeMetric":18,"../metrics/DocumentReferrerMetric":19,"../metrics/EngagementTimeAggregatorMetric":20,"../metrics/IdMetric":21,"../metrics/JSErrorCountMetric":22,"../metrics/LocationMetric":23,"../metrics/MetricAggregator":24,"../metrics/MetricsPromise":26,"../metrics/MetricsReader":27,"../metrics/PageViewIdentificationMetric":28,"../metrics/PeriodicalNotifierRule":29,"../metrics/ProjectIdMetric":30,"../metrics/ReturningOrNewVisitorMetric":31,"../metrics/ScrollReachMetric":32,"../metrics/TimeOnPageMetric":33,"../metrics/VersionMetric":34,"../metrics/VisitIdentificationMetric":35,"../metrics/VisitorIdentificationMetric":36,"../services/cookies/CookiesService":37,"../services/disposer/Disposer":38,"../services/idGenerator/IdGenerator":39,"../services/identification/IdentificationService":40,"../services/userAgent/UserAgentService":42,"../transport/BeaconTransportChannel":44,"../transport/ImageTransportChannel":45,"../transport/XhrTransportChannel":46}],2:[function(require,module,exports){
var App_1 = require("./App");
exports.App = App_1.App;

},{"./App":1}],3:[function(require,module,exports){
var Dictionary = (function () {
    function Dictionary() {
    }
    Dictionary.prototype.add = function (key, value) {
        this[key.toString()] = value;
    };
    Dictionary.prototype.remove = function (key) {
        delete this[key.toString()];
    };
    Dictionary.prototype.containsKey = function (key) {
        return !!this[key.toString()];
    };
    Dictionary.prototype.tryGetValue = function (key, entry) {
        var value = this[key.toString()];
        if (value) {
            entry.out = value;
            return true;
        }
        return false;
    };
    Dictionary.prototype.clear = function () {
        var _this = this;
        Object.keys(this).forEach(function (key) {
            delete _this[key];
        });
    };
    Dictionary.prototype.values = function () {
        var _this = this;
        return Object.keys(this).map(function (key) {
            return _this[key];
        });
    };
    return Dictionary;
})();
exports.Dictionary = Dictionary;

},{}],4:[function(require,module,exports){
var ObjectExtender_1 = require("../services/objectExtender/ObjectExtender");
var userConfig = window.ClickTaleMonitorSettings;
var Configuration = {
    metrics: {
        inactivityTime: 20000,
        maxFetchInterval: 10000,
        providers: [
            "TimeOnPageMetric",
            "ScrollReachMetric",
            "JSErrorCountMetric",
            "ReturningOrNewVisitorMetric",
            "EngagementTimeAggregatorMetric"
        ]
    },
    identification: {
        expirationDays: 365,
        visitTimeSpan: 1800000
    },
    transport: {
        url: "https://",
        mainChannel: "main",
        terminalChannel: "terminal"
    },
    distribution: {
        relaibleMessages: {
            retries: 2,
            waitInterval: 1000
        }
    }
};
exports.Configuration = Configuration;
Configuration = ObjectExtender_1.ObjectExtender.extend(Configuration, userConfig);

},{"../services/objectExtender/ObjectExtender":41}],5:[function(require,module,exports){
var EventType_1 = require("../eventHubs/EventType");
var Dictionary_1 = require("../collections/Dictionary");
var DistributionService = (function () {
    function DistributionService(app, config, hub, container, channelFactory) {
        var _this = this;
        this.app = app;
        this.config = config;
        this.hub = hub;
        this.container = container;
        this.channelFactory = channelFactory;
        this.isBrowserOnline = false;
        this.envelopeMap = new Dictionary_1.Dictionary();
        this.transportUrl = config.transport.url;
        this.channelSettings = {
            sendPromise: {
                reject: this.onTransportFailure,
                resolve: this.onTransportSuccess,
            },
            waitInterval: config.distribution.relaibleMessages.waitInterval
        };
        this.isBrowserOnline = navigator.onLine;
        this.hub.bind([EventType_1.EventType.online, EventType_1.EventType.offline], function () { return _this.isBrowserOnline = navigator.onLine; });
    }
    DistributionService.prototype.process = function (data, metrics) {
        var envelope;
        var message = { data: data };
        var outResult = {};
        if (!metrics.reliable || !this.envelopeMap.tryGetValue(metrics.id, outResult)) {
            envelope = {
                message: message,
                metrics: metrics,
                retries: this.config.distribution.relaibleMessages.retries
            };
            this.envelopeMap.add(metrics.id, envelope);
        }
        else {
            envelope = outResult.out;
            if (--envelope.retries < 0) {
                return this.app.shutdown();
            }
        }
        this.distributeEnvelope(envelope);
    };
    DistributionService.prototype.distributeEnvelope = function (envelope) {
        if (this.isBrowserOnline) {
            var url = this.transportUrl + "?t=" + envelope.metrics.type;
            var channel = this.channelFactory.getChannel(this.channelSettings);
            channel.send(url, envelope);
        }
    };
    DistributionService.prototype.onTransportSuccess = function (envelope) {
        envelope.metrics.promise.resolve(envelope.metrics);
    };
    DistributionService.prototype.onTransportFailure = function (envelope) {
        envelope.metrics.promise.reject(envelope.metrics);
    };
    return DistributionService;
})();
exports.DistributionService = DistributionService;

},{"../collections/Dictionary":3,"../eventHubs/EventType":6}],6:[function(require,module,exports){
var EventType;
(function (EventType) {
    EventType[EventType["error"] = 0] = "error";
    EventType[EventType["keyup"] = 1] = "keyup";
    EventType[EventType["scroll"] = 2] = "scroll";
    EventType[EventType["resize"] = 3] = "resize";
    EventType[EventType["unload"] = 4] = "unload";
    EventType[EventType["online"] = 5] = "online";
    EventType[EventType["mouseup"] = 6] = "mouseup";
    EventType[EventType["offline"] = 7] = "offline";
    EventType[EventType["mouseover"] = 8] = "mouseover";
    EventType[EventType["touchstart"] = 9] = "touchstart";
    EventType[EventType["beforeunload"] = 10] = "beforeunload";
    EventType[EventType["visibilitychange"] = 11] = "visibilitychange";
})(EventType || (EventType = {}));
exports.EventType = EventType;

},{}],7:[function(require,module,exports){
var EventType_1 = require("../eventHubs/EventType");
var Dictionary_1 = require("../collections/Dictionary");
var Hub = (function () {
    function Hub(userAgentService) {
        this.userAgentService = userAgentService;
        this.bindedPublish = this.publish.bind(this);
        this.subscribers = new Dictionary_1.Dictionary();
        this.documentEvents = [EventType_1.EventType.mouseover, EventType_1.EventType.mouseup, EventType_1.EventType.keyup, EventType_1.EventType.visibilitychange];
        this.userEvents = [EventType_1.EventType.mouseover, EventType_1.EventType.mouseup, EventType_1.EventType.keyup, EventType_1.EventType.scroll, EventType_1.EventType.resize];
        this.windowEvents = [EventType_1.EventType.scroll, EventType_1.EventType.resize, EventType_1.EventType.online, EventType_1.EventType.offline, EventType_1.EventType.error, EventType_1.EventType.beforeunload, EventType_1.EventType.unload];
        this.init();
    }
    Hub.prototype.init = function () {
        var _this = this;
        if (this.userAgentService.userAgent.is.mobile) {
            this.userEvents.push(EventType_1.EventType.touchstart);
            this.documentEvents.push(EventType_1.EventType.touchstart);
        }
        this.documentEvents.concat(this.windowEvents).forEach(function (eventType) {
            _this.subscribers[eventType] = new Array();
        });
        this.bindBrowserEvents();
    };
    Hub.prototype.bind = function (eventTypes, callback) {
        this.bindInternal(eventTypes, callback);
    };
    Hub.prototype.unbind = function (eventTypes, callback) {
        var _this = this;
        eventTypes.forEach(function (eventType) {
            if (_this.subscribers) {
                var listeners = _this.subscribers[eventType];
                var index = listeners.indexOf(callback);
                if (index > -1) {
                    listeners.splice(index, 1);
                }
            }
        });
    };
    Hub.prototype.bindTop = function (eventTypes, callback) {
        this.bindInternal(eventTypes, callback, true);
    };
    Hub.prototype.bindInternal = function (eventTypes, callback, top) {
        var _this = this;
        if (top === void 0) { top = false; }
        var insertFn = top ? function (subs) { return subs.splice(0, 0, callback); } : function (subs) { return subs.push(callback); };
        eventTypes.forEach(function (eventType) { return insertFn(_this.subscribers[eventType]); });
    };
    Hub.prototype.unbindAll = function () {
        this.subscribers = null;
    };
    Hub.prototype.publish = function (event) {
        var eventType = EventType_1.EventType[event.type];
        this.subscribers[eventType].forEach(function (callback) { return callback(event); });
    };
    Hub.prototype.dispose = function (shutdown) {
        this.unbindAll();
        this.unbindBrowserEvents();
    };
    Hub.prototype.bindBrowserEvents = function () {
        var addEventListenerFactory = function (eventListenerRegistrator) {
            return eventListenerRegistrator.addEventListener;
        };
        this.bindUnbindBrowserEvent(addEventListenerFactory, window, this.windowEvents, this.bindedPublish);
        this.bindUnbindBrowserEvent(addEventListenerFactory, document, this.documentEvents, this.bindedPublish);
    };
    Hub.prototype.unbindBrowserEvents = function () {
        var removeEventListenerFactory = function (eventListenerRegistrator) {
            return eventListenerRegistrator.removeEventListener;
        };
        this.bindUnbindBrowserEvent(removeEventListenerFactory, window, this.windowEvents, this.bindedPublish);
        this.bindUnbindBrowserEvent(removeEventListenerFactory, document, this.documentEvents, this.bindedPublish);
    };
    Hub.prototype.bindUnbindBrowserEvent = function (factory, registrator, eventTypes, eventListener) {
        eventTypes.forEach(function (eventType) {
            var event = EventType_1.EventType[eventType];
            var eventListenerDefinition = factory(registrator);
            eventListenerDefinition.apply(registrator, [event, eventListener, false]);
        });
    };
    return Hub;
})();
exports.Hub = Hub;

},{"../collections/Dictionary":3,"../eventHubs/EventType":6}],8:[function(require,module,exports){
var ServiceKey_1 = require("./ServiceKey");
var Dictionary_1 = require("../collections/Dictionary");
var GenericServiceEntry_1 = require("./GenericServiceEntry");
var Container = (function () {
    function Container() {
        this.defaultOwner = 0 /* container */;
        this.defaultReuse = 0 /* container */;
        this.disposables = new Array();
        this.services = new Dictionary_1.Dictionary();
        var serviceEntry = GenericServiceEntry_1.GenericServiceEntry.build({
            instance: this,
            factory: function (c) { return c; },
            container: this,
            owner: 1 /* external */,
            reuse: 0 /* container */
        });
        this.services.add(new ServiceKey_1.ServiceKey(Container), serviceEntry);
    }
    Container.prototype.dispose = function (shutdown) {
        while (this.disposables.length > 0) {
            var disposable = this.disposables.shift();
            disposable.dispose(shutdown);
        }
    };
    Container.prototype.register = function (ctor, factory) {
        return this.registerNamed(ctor, null, factory);
    };
    Container.prototype.registerInstance = function (instance) {
        this.registerNamedInstance(null, instance);
    };
    Container.prototype.registerNamedInstance = function (name, instance) {
        var proto = Object.getPrototypeOf(instance);
        var ctor = proto.constructor;
        var entry = this.registerImpl(ctor, name, null);
        entry.asSingleton()
            .ownedExternally();
        entry.initializeInstance(instance);
    };
    Container.prototype.registerNamed = function (ctor, name, factory) {
        return this.registerImpl(ctor, name, factory);
    };
    Container.prototype.registerImpl = function (ctor, name, factory) {
        var key = new ServiceKey_1.ServiceKey(ctor, name);
        var entry = GenericServiceEntry_1.GenericServiceEntry.build({
            container: this,
            factory: factory,
            reuse: this.defaultReuse,
            owner: this.defaultOwner
        });
        this.services.add(key, entry);
        return entry;
    };
    Container.prototype.resolve = function (ctor, arg1, arg2, arg3, arg4) {
        var args = [ctor, null, arg1, arg2, arg3, arg4];
        return this.resolveNamed.apply(this, args);
    };
    Container.prototype.resolveNamed = function (ctor, name, arg1, arg, arg3, arg4) {
        var args = Array.prototype.slice.call(arguments, 2);
        return this.resolveImpl(ctor, name, args);
    };
    Container.prototype.resolveFactory = function (ctor) {
        return this.resolveNamedFactory(ctor, null);
    };
    Container.prototype.resolveNamedFactory = function (ctor, name) {
        var instance;
        var entry = this.getEntry(ctor, name);
        if (!entry) {
            return function () { return null; };
        }
        return function (arg1, arg2, arg3, arg4) {
            var args = [entry.container, arg1, arg2, arg3, arg4];
            instance = entry.instance;
            if (!instance) {
                instance = entry.factory.apply(null, args);
                entry.initializeInstance(instance);
            }
            return instance;
        };
    };
    Container.prototype.resolveImpl = function (ctor, name, args) {
        var instance;
        var entry = this.getEntry(ctor, name);
        if (!entry) {
            return null;
        }
        instance = entry.instance;
        if (!instance) {
            args = args || [];
            args.splice(0, 0, entry.container);
            instance = entry.factory.apply(null, args);
            entry.initializeInstance(instance);
        }
        return instance;
    };
    Container.prototype.getEntry = function (ctor, serviceName) {
        var container = this;
        var entry;
        var key = new ServiceKey_1.ServiceKey(ctor, serviceName);
        var outResult = {};
        if (this.services.tryGetValue(key, outResult)) {
            entry = outResult.out;
        }
        return entry;
    };
    Container.prototype.trackDisposable = function (instance) {
        this.disposables.push(instance);
    };
    return Container;
})();
exports.Container = Container;

},{"../collections/Dictionary":3,"./GenericServiceEntry":9,"./ServiceKey":12}],9:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServiceEntry_1 = require("./ServiceEntry");
var GenericServiceEntry = (function (_super) {
    __extends(GenericServiceEntry, _super);
    function GenericServiceEntry(factory) {
        _super.call(this);
        this.factory = factory;
    }
    GenericServiceEntry.prototype.initializeInstance = function (instance) {
        var dynamicInstance = instance;
        if (this.reuse !== 1 /* none */) {
            this.instance = instance;
        }
        if (this.owner === 0 /* container */ && dynamicInstance.dispose) {
            this.container.trackDisposable(dynamicInstance);
        }
        if (this.initializer) {
            this.initializer(this.container, instance);
        }
    };
    GenericServiceEntry.prototype.initializedBy = function (initializer) {
        this.initializer = initializer;
        return this;
    };
    GenericServiceEntry.prototype.cloneFor = function (newContainer) {
        return GenericServiceEntry.build({
            reuse: this.reuse,
            owner: this.owner,
            factory: this.factory,
            container: newContainer,
            initializer: this.initializer
        });
    };
    GenericServiceEntry.build = function (bag) {
        var serviceEntry = new GenericServiceEntry(bag.factory);
        serviceEntry.owner = bag.owner;
        serviceEntry.reuse = bag.reuse;
        serviceEntry.instance = bag.instance;
        serviceEntry.container = bag.container;
        serviceEntry.initializer = bag.initializer;
        return serviceEntry;
    };
    return GenericServiceEntry;
})(ServiceEntry_1.ServiceEntry);
exports.GenericServiceEntry = GenericServiceEntry;

},{"./ServiceEntry":11}],10:[function(require,module,exports){
var NameResolver = (function () {
    function NameResolver() {
    }
    NameResolver.resolve = function (ctor) {
        if (typeof ctor === "string") {
            return ctor;
        }
        return ctor.name || NameResolver.resolveByCode(ctor);
    };
    NameResolver.resolveByCode = function (ctor) {
        var match = ctor.toString().match(NameResolver.nameRegex);
        return (match && match.length > 0 && match[1]) || NameResolver.resolveByPrototype(ctor);
    };
    NameResolver.resolveByPrototype = function (ctor) {
        var buffer = new Array();
        var prototype = ctor.prototype;
        for (var item in prototype) {
            buffer.push(item);
        }
        return buffer.join("");
    };
    NameResolver.nameRegex = /function ([^\(]+)/;
    return NameResolver;
})();
exports.NameResolver = NameResolver;

},{}],11:[function(require,module,exports){
var ServiceEntry = (function () {
    function ServiceEntry() {
    }
    ServiceEntry.prototype.ownedByContainer = function () {
        this.owner = 0 /* container */;
    };
    ServiceEntry.prototype.ownedExternally = function () {
        this.owner = 1 /* external */;
        return this;
    };
    ServiceEntry.prototype.asSingleton = function () {
        this.reuse = 0 /* container */;
        return this;
    };
    ServiceEntry.prototype.asTransient = function () {
        this.reuse = 1 /* none */;
        return this;
    };
    return ServiceEntry;
})();
exports.ServiceEntry = ServiceEntry;

},{}],12:[function(require,module,exports){
var NameResolver_1 = require("./NameResolver");
var ServiceKey = (function () {
    function ServiceKey(ctor, serviceName) {
        this.ctor = ctor;
        this.serviceName = serviceName;
        this.key = NameResolver_1.NameResolver.resolve(ctor);
        if (serviceName) {
            this.key += serviceName;
        }
    }
    ServiceKey.prototype.toString = function () {
        return this.key;
    };
    return ServiceKey;
})();
exports.ServiceKey = ServiceKey;

},{"./NameResolver":10}],13:[function(require,module,exports){
var MetricType_1 = require("../metrics/MetricType");
var JSONSerializer = (function () {
    function JSONSerializer() {
    }
    JSONSerializer.prototype.serialize = function (value) {
        var result = {};
        value.forEach(function (metric) { return result[MetricType_1.MetricType[metric.type]] = metric.value; });
        return JSON.stringify(result);
    };
    return JSONSerializer;
})();
exports.JSONSerializer = JSONSerializer;

},{"../metrics/MetricType":25}],14:[function(require,module,exports){
var QueryStringSerializer = (function () {
    function QueryStringSerializer() {
    }
    QueryStringSerializer.prototype.serialize = function (value) {
        var builder = [];
        value.forEach(function (item) {
            builder.push(item.type + "=" + encodeURIComponent(item.value));
        });
        return builder.join("&");
    };
    return QueryStringSerializer;
})();
exports.QueryStringSerializer = QueryStringSerializer;

},{}],15:[function(require,module,exports){
var AbstractActivityMetric = (function () {
    function AbstractActivityMetric(timing) {
        this.isLast = false;
        this.oneTime = false;
        this.inactivityDetectedTime = 0;
        this.inactivityDetected = false;
        this.inactivityAggregatedTime = 0;
        this.navigationStart = timing.navigationStart;
    }
    /**
    *  In case there are preceding calls to getMetric() during the inactivity period,
    *  this function will be called and the inactivityDetected flag will remain true.
    *  In order to avoid overlapping time accumulations we have to take the time difference
    *  between the current call and the previous one, by setting the inactivityDetectedTime
    *  to current time.
    */
    AbstractActivityMetric.prototype.tryAccumulateInactivityTime = function () {
        var now = Date.now();
        if (this.inactivityDetected) {
            this.inactivityAggregatedTime += now - this.inactivityDetectedTime;
            this.inactivityDetectedTime = now;
        }
    };
    AbstractActivityMetric.prototype.markActivity = function () {
        this.tryAccumulateInactivityTime();
        this.inactivityDetected = false;
    };
    AbstractActivityMetric.prototype.markInactivity = function () {
        this.inactivityDetected = true;
        this.inactivityDetectedTime = Date.now();
    };
    AbstractActivityMetric.prototype.getMetric = function () {
        this.tryAccumulateInactivityTime();
        return {
            type: this.getMetricType(),
            value: Date.now() - this.navigationStart - this.inactivityAggregatedTime
        };
    };
    return AbstractActivityMetric;
})();
exports.AbstractActivityMetric = AbstractActivityMetric;

},{}],16:[function(require,module,exports){
var AbstractEventRule = (function () {
    function AbstractEventRule() {
    }
    AbstractEventRule.prototype.registerNotification = function (callback) {
        this.callback = callback;
        return this;
    };
    AbstractEventRule.prototype.notify = function () {
        this.callback();
    };
    return AbstractEventRule;
})();
exports.AbstractEventRule = AbstractEventRule;

},{}],17:[function(require,module,exports){
var AbstractIdentificationMetric = (function () {
    function AbstractIdentificationMetric(identificationService) {
        this.identificationService = identificationService;
        this.isLast = true;
        this.oneTime = false;
    }
    AbstractIdentificationMetric.prototype.getMetric = function () {
        return {
            type: this.type,
            value: this.getMetricValue(this.identificationService.getIdentification())
        };
    };
    return AbstractIdentificationMetric;
})();
exports.AbstractIdentificationMetric = AbstractIdentificationMetric;

},{}],18:[function(require,module,exports){
var MetricType_1 = require("./MetricType");
var DOMLContentLoadedTimeMetric = (function () {
    function DOMLContentLoadedTimeMetric(timing) {
        this.timing = timing;
        this.isLast = false;
        this.oneTime = true;
    }
    DOMLContentLoadedTimeMetric.prototype.getMetric = function () {
        return {
            type: MetricType_1.MetricType.domContentLoaded,
            value: this.timing.domContentLoadedEventEnd - this.timing.navigationStart
        };
    };
    return DOMLContentLoadedTimeMetric;
})();
exports.DOMLContentLoadedTimeMetric = DOMLContentLoadedTimeMetric;

},{"./MetricType":25}],19:[function(require,module,exports){
var MetricType_1 = require("./MetricType");
var DocumentReferrerMetric = (function () {
    function DocumentReferrerMetric() {
        this.isLast = false;
        this.oneTime = true;
    }
    DocumentReferrerMetric.prototype.getMetric = function () {
        return {
            value: document.referrer,
            type: MetricType_1.MetricType.documentReferrer
        };
    };
    return DocumentReferrerMetric;
})();
exports.DocumentReferrerMetric = DocumentReferrerMetric;

},{"./MetricType":25}],20:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractActivityMetric_1 = require("./AbstractActivityMetric");
var EngagementTimeAggregatorMetric = (function (_super) {
    __extends(EngagementTimeAggregatorMetric, _super);
    function EngagementTimeAggregatorMetric(hub, config, timing) {
        _super.call(this, timing);
        this.hub = hub;
        this.config = config;
        this.intervalId = 0;
        this.hub.bind(hub.userEvents, this.onEventRaised.bind(this));
        this.guardInactivityTime();
    }
    EngagementTimeAggregatorMetric.prototype.getMetricType = function () {
        return MetricType_1.MetricType.engagementTime;
    };
    EngagementTimeAggregatorMetric.prototype.guardInactivityTime = function () {
        var _this = this;
        clearTimeout(this.intervalId);
        this.intervalId = setTimeout(function () {
            _this.markInactivity();
        }, this.config.metrics.inactivityTime);
    };
    EngagementTimeAggregatorMetric.prototype.onEventRaised = function (ev) {
        this.markActivity();
        this.guardInactivityTime();
    };
    EngagementTimeAggregatorMetric.prototype.dispose = function (shutdown) {
        clearTimeout(this.intervalId);
    };
    return EngagementTimeAggregatorMetric;
})(AbstractActivityMetric_1.AbstractActivityMetric);
exports.EngagementTimeAggregatorMetric = EngagementTimeAggregatorMetric;

},{"./AbstractActivityMetric":15,"./MetricType":25}],21:[function(require,module,exports){
var MetricType_1 = require("./MetricType");
var IdMetric = (function () {
    function IdMetric(id) {
        this.id = id;
        this.isLast = true;
        this.oneTime = false;
    }
    IdMetric.prototype.getMetric = function () {
        return {
            value: this.id,
            type: MetricType_1.MetricType.messageId
        };
    };
    return IdMetric;
})();
exports.IdMetric = IdMetric;

},{"./MetricType":25}],22:[function(require,module,exports){
var MetricType_1 = require("./MetricType");
var EventType_1 = require("../eventHubs/EventType");
var JSErrorCountMetric = (function () {
    function JSErrorCountMetric(hub) {
        this.hub = hub;
        this.isLast = false;
        this.oneTime = false;
        this.jsErrorCounter = 0;
        this.hub.bind([EventType_1.EventType.error], this.onEventRaised.bind(this));
    }
    JSErrorCountMetric.prototype.onEventRaised = function (ev) {
        this.jsErrorCounter++;
    };
    JSErrorCountMetric.prototype.getMetric = function () {
        return {
            value: this.jsErrorCounter,
            type: MetricType_1.MetricType.jsErrorCount
        };
    };
    return JSErrorCountMetric;
})();
exports.JSErrorCountMetric = JSErrorCountMetric;

},{"../eventHubs/EventType":6,"./MetricType":25}],23:[function(require,module,exports){
var MetricType_1 = require("./MetricType");
var LocationMetric = (function () {
    function LocationMetric() {
        this.oneTime = true;
        this.isLast = false;
    }
    LocationMetric.prototype.getMetric = function () {
        return {
            value: location.href,
            type: MetricType_1.MetricType.location
        };
    };
    return LocationMetric;
})();
exports.LocationMetric = LocationMetric;

},{"./MetricType":25}],24:[function(require,module,exports){
var EventType_1 = require("../eventHubs/EventType");
var MetricAggregator = (function () {
    function MetricAggregator(metrics, hub, config, idMetricFactory, serializableFactory) {
        var _this = this;
        this.metrics = metrics;
        this.config = config;
        this.idMetricFactory = idMetricFactory;
        this.serializableFactory = serializableFactory;
        this.reliable = true;
        this.metricCounter = 0;
        this.messageType = 0 /* start */;
        this.serilaizer = serializableFactory.getSerializer();
        hub.bindTop([EventType_1.EventType.beforeunload, EventType_1.EventType.unload], function () {
            _this.terminate();
        });
    }
    MetricAggregator.prototype.terminate = function () {
        this.messageType = 2 /* end */;
        this.serilaizer = this.serializableFactory.getSerializer();
        this.metrics = this.metrics.filter(function (metric) { return metric.isLast; });
    };
    MetricAggregator.prototype.getMetrics = function () {
        var id = this.getMetricId();
        var metrics;
        var idMetric = this.idMetricFactory(id);
        metrics = this.metrics.concat([idMetric]);
        return {
            id: id,
            type: this.messageType,
            reliable: this.reliable,
            metrics: this.serilaizer.serialize(metrics.map(function (metric) { return metric.getMetric(); }))
        };
    };
    MetricAggregator.prototype.resolveMetrics = function (metricsIdentifier) {
        if (metricsIdentifier.reliable) {
            this.reliable = false;
            this.messageType = 1 /* chunk */;
            this.metrics = this.metrics.filter(function (metric) { return !metric.oneTime; });
        }
    };
    MetricAggregator.prototype.getMetricId = function () {
        return this.reliable ? this.metricCounter : ++this.metricCounter;
    };
    return MetricAggregator;
})();
exports.MetricAggregator = MetricAggregator;

},{"../eventHubs/EventType":6}],25:[function(require,module,exports){
var MetricType;
(function (MetricType) {
    MetricType[MetricType["visitId"] = 3] = "visitId";
    MetricType[MetricType["version"] = 6] = "version";
    MetricType[MetricType["screenX"] = 16] = "screenX";
    MetricType[MetricType["screenY"] = 17] = "screenY";
    MetricType[MetricType["browser"] = 18] = "browser";
    MetricType[MetricType["location"] = 7] = "location";
    MetricType[MetricType["visitorId"] = 2] = "visitorId";
    MetricType[MetricType["projectId"] = 1] = "projectId";
    MetricType[MetricType["messageId"] = 5] = "messageId";
    MetricType[MetricType["eventIds"] = 20] = "eventIds";
    MetricType[MetricType["pageviewId"] = 4] = "pageviewId";
    MetricType[MetricType["timestamp"] = 31] = "timestamp";
    MetricType[MetricType["attention"] = 32] = "attention";
    MetricType[MetricType["timeOnPage"] = 12] = "timeOnPage";
    MetricType[MetricType["numOfClicks"] = 14] = "numOfClicks";
    MetricType[MetricType["scrollReach"] = 13] = "scrollReach";
    MetricType[MetricType["jsErrorCount"] = 11] = "jsErrorCount";
    MetricType[MetricType["engagementTime"] = 9] = "engagementTime";
    MetricType[MetricType["lackOfInterest"] = 30] = "lackOfInterest";
    MetricType[MetricType["documentReferrer"] = 8] = "documentReferrer";
    MetricType[MetricType["domContentLoaded"] = 10] = "domContentLoaded";
    MetricType[MetricType["browserWithVersion"] = 19] = "browserWithVersion";
    MetricType[MetricType["returningOrNewVisitor"] = 21] = "returningOrNewVisitor";
    MetricType[MetricType["durationSinceLastVisit"] = 15] = "durationSinceLastVisit";
})(MetricType || (MetricType = {}));
exports.MetricType = MetricType;

},{}],26:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractEventRule_1 = require("./AbstractEventRule");
var MetricsPromise = (function (_super) {
    __extends(MetricsPromise, _super);
    function MetricsPromise(metricsAggregator) {
        _super.call(this);
        this.metricsAggregator = metricsAggregator;
        this.started = false;
    }
    MetricsPromise.prototype.resolve = function (metricsIdentifier) {
        this.metricsAggregator.resolveMetrics(metricsIdentifier);
    };
    MetricsPromise.prototype.reject = function (metricsIdentifier) {
        if (metricsIdentifier.reliable && this.started) {
            this.notify();
        }
    };
    MetricsPromise.prototype.start = function () {
        this.started = true;
    };
    MetricsPromise.prototype.stop = function () {
        this.started = false;
    };
    return MetricsPromise;
})(AbstractEventRule_1.AbstractEventRule);
exports.MetricsPromise = MetricsPromise;

},{"./AbstractEventRule":16}],27:[function(require,module,exports){
var EventType_1 = require("../eventHubs/EventType");
var MetricsReader = (function () {
    function MetricsReader(notificationRules, hub, metricsAggregator, processor, promise, identificationService) {
        var _this = this;
        this.notificationRules = notificationRules;
        this.hub = hub;
        this.metricsAggregator = metricsAggregator;
        this.processor = processor;
        this.promise = promise;
        this.identificationService = identificationService;
        notificationRules.forEach(function (rule) { return rule.registerNotification(_this.read.bind(_this)).start(); });
        this.hub.bind([EventType_1.EventType.online, EventType_1.EventType.offline], function () {
            _this.applyOnNotificationRules(function (rule) { return navigator.onLine ? rule.start() : rule.stop(); });
        });
    }
    MetricsReader.prototype.read = function () {
        var metricsResult = this.metricsAggregator.getMetrics();
        if (metricsResult.isEmpty) {
            return;
        }
        this.identificationService.modifyIdentification();
        this.processor.process(metricsResult.metrics, {
            id: metricsResult.id,
            promise: this.promise,
            type: metricsResult.type,
            reliable: metricsResult.reliable
        });
    };
    MetricsReader.prototype.dispose = function (shutdown) {
        if (!shutdown) {
            this.read();
        }
        this.applyOnNotificationRules(function (rule) { return rule.stop(); });
    };
    MetricsReader.prototype.applyOnNotificationRules = function (apply) {
        this.notificationRules.forEach(function (rule) { return apply(rule); });
    };
    return MetricsReader;
})();
exports.MetricsReader = MetricsReader;

},{"../eventHubs/EventType":6}],28:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractIdentificationMetric_1 = require("./AbstractIdentificationMetric");
var PageViewIdentificationMetric = (function (_super) {
    __extends(PageViewIdentificationMetric, _super);
    function PageViewIdentificationMetric(identificationService) {
        _super.call(this, identificationService);
        this.type = MetricType_1.MetricType.pageviewId;
    }
    PageViewIdentificationMetric.prototype.getMetricValue = function (identificationService) {
        return identificationService.PageView;
    };
    return PageViewIdentificationMetric;
})(AbstractIdentificationMetric_1.AbstractIdentificationMetric);
exports.PageViewIdentificationMetric = PageViewIdentificationMetric;

},{"./AbstractIdentificationMetric":17,"./MetricType":25}],29:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractEventRule_1 = require("./AbstractEventRule");
var PeriodicalNotifierRule = (function (_super) {
    __extends(PeriodicalNotifierRule, _super);
    function PeriodicalNotifierRule(config) {
        _super.call(this);
        this.config = config;
        this.firstFibNumber = 0;
        this.secondFibNumber = 1;
        this.maxIntervalReached = false;
        this.maxFetchInterval = this.config.metrics.maxFetchInterval;
    }
    PeriodicalNotifierRule.prototype.start = function () {
        var _this = this;
        var interval = this.maxIntervalReached ? this.maxFetchInterval : this.getFetchInterval();
        this.timeoutId = setTimeout(function () {
            _this.notify();
            _this.start();
        }, interval);
    };
    PeriodicalNotifierRule.prototype.stop = function () {
        clearInterval(this.timeoutId);
    };
    PeriodicalNotifierRule.prototype.dispose = function (shutdown) {
        this.stop();
    };
    PeriodicalNotifierRule.prototype.getFetchInterval = function () {
        var fibNumber = this.firstFibNumber + this.secondFibNumber;
        var interval = fibNumber * 1000;
        if (interval > this.maxFetchInterval) {
            this.maxIntervalReached = true;
            return this.maxFetchInterval;
        }
        this.firstFibNumber = this.secondFibNumber;
        this.secondFibNumber = fibNumber;
        return interval;
    };
    return PeriodicalNotifierRule;
})(AbstractEventRule_1.AbstractEventRule);
exports.PeriodicalNotifierRule = PeriodicalNotifierRule;

},{"./AbstractEventRule":16}],30:[function(require,module,exports){
var MetricType_1 = require("./MetricType");
var ProjectIdMetric = (function () {
    function ProjectIdMetric(projectId) {
        this.projectId = projectId;
        this.isLast = true;
        this.oneTime = false;
    }
    ProjectIdMetric.prototype.getMetric = function () {
        return {
            value: this.projectId,
            type: MetricType_1.MetricType.projectId
        };
    };
    return ProjectIdMetric;
})();
exports.ProjectIdMetric = ProjectIdMetric;

},{"./MetricType":25}],31:[function(require,module,exports){
var MetricType_1 = require("./MetricType");
var ReturningOrNewVisitorMetric = (function () {
    function ReturningOrNewVisitorMetric(identificationService) {
        this.identificationService = identificationService;
        this.isLast = true;
        this.oneTime = false;
    }
    ReturningOrNewVisitorMetric.prototype.getMetric = function () {
        return {
            type: MetricType_1.MetricType.returningOrNewVisitor,
            value: this.identificationService.isNewIdentification
        };
    };
    return ReturningOrNewVisitorMetric;
})();
exports.ReturningOrNewVisitorMetric = ReturningOrNewVisitorMetric;

},{"./MetricType":25}],32:[function(require,module,exports){
var MetricType_1 = require("./MetricType");
var EventType_1 = require("../eventHubs/EventType");
var ScrollReachMetric = (function () {
    function ScrollReachMetric(hub) {
        this.hub = hub;
        this.isLast = true;
        this.oneTime = false;
        this.maxScrollReach = 0;
        this.hub.bind([EventType_1.EventType.scroll], this.onEventRaised.bind(this));
    }
    ScrollReachMetric.prototype.onEventRaised = function (ev) {
        var clientHeight = document.documentElement.clientHeight;
        var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
        var scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;
        var scrollReach = scrollTop / (scrollHeight - clientHeight) * 100;
        this.maxScrollReach = Math.max(scrollReach, this.maxScrollReach);
    };
    ScrollReachMetric.prototype.getMetric = function () {
        return {
            value: this.maxScrollReach,
            type: MetricType_1.MetricType.scrollReach
        };
    };
    return ScrollReachMetric;
})();
exports.ScrollReachMetric = ScrollReachMetric;

},{"../eventHubs/EventType":6,"./MetricType":25}],33:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var EventType_1 = require("../eventHubs/EventType");
var AbstractActivityMetric_1 = require("./AbstractActivityMetric");
var TimeOnPageMetric = (function (_super) {
    __extends(TimeOnPageMetric, _super);
    function TimeOnPageMetric(hub, timing) {
        _super.call(this, timing);
        this.hub = hub;
        this.hub.bind([EventType_1.EventType.visibilitychange], this.onEventRaised.bind(this));
    }
    TimeOnPageMetric.prototype.getMetricType = function () {
        return MetricType_1.MetricType.timeOnPage;
    };
    TimeOnPageMetric.prototype.onEventRaised = function (ev) {
        if (document.hidden) {
            this.markInactivity();
        }
        else {
            this.markActivity();
        }
    };
    return TimeOnPageMetric;
})(AbstractActivityMetric_1.AbstractActivityMetric);
exports.TimeOnPageMetric = TimeOnPageMetric;

},{"../eventHubs/EventType":6,"./AbstractActivityMetric":15,"./MetricType":25}],34:[function(require,module,exports){
var MetricType_1 = require("./MetricType");
var VersionMetric = (function () {
    function VersionMetric() {
        this.isLast = false;
        this.oneTime = true;
    }
    VersionMetric.prototype.getMetric = function () {
        return {
            value: 1,
            type: MetricType_1.MetricType.version
        };
    };
    return VersionMetric;
})();
exports.VersionMetric = VersionMetric;

},{"./MetricType":25}],35:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractIdentificationMetric_1 = require("./AbstractIdentificationMetric");
var VisitIdentificationMetric = (function (_super) {
    __extends(VisitIdentificationMetric, _super);
    function VisitIdentificationMetric(identificationService) {
        _super.call(this, identificationService);
        this.type = MetricType_1.MetricType.visitId;
    }
    VisitIdentificationMetric.prototype.getMetricValue = function (identificationService) {
        return identificationService.Visit;
    };
    return VisitIdentificationMetric;
})(AbstractIdentificationMetric_1.AbstractIdentificationMetric);
exports.VisitIdentificationMetric = VisitIdentificationMetric;

},{"./AbstractIdentificationMetric":17,"./MetricType":25}],36:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractIdentificationMetric_1 = require("./AbstractIdentificationMetric");
var VisitorIdentificationMetric = (function (_super) {
    __extends(VisitorIdentificationMetric, _super);
    function VisitorIdentificationMetric(identificationService) {
        _super.call(this, identificationService);
        this.type = MetricType_1.MetricType.visitorId;
    }
    VisitorIdentificationMetric.prototype.getMetricValue = function (identificationService) {
        return identificationService.Visitor;
    };
    return VisitorIdentificationMetric;
})(AbstractIdentificationMetric_1.AbstractIdentificationMetric);
exports.VisitorIdentificationMetric = VisitorIdentificationMetric;

},{"./AbstractIdentificationMetric":17,"./MetricType":25}],37:[function(require,module,exports){
var CookiesService = (function () {
    function CookiesService() {
    }
    CookiesService.prototype.delete = function (cookie) {
        this.write(cookie, "", -1);
    };
    CookiesService.prototype.read = function (cookie) {
        var to = 0;
        var from = 0;
        var tuples = document.cookie.split(";");
        cookie += "=";
        for (var _i = 0; _i < tuples.length; _i++) {
            var keyValue = tuples[_i];
            if (keyValue.trim().indexOf(cookie) === 0) {
                to = from + keyValue.length;
                from = from + keyValue.split("=")[0].length + 1;
                return document.cookie.substring(from, to);
            }
            from += keyValue.length + 1;
        }
        return null;
    };
    CookiesService.prototype.write = function (cookie, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 86400000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = cookie + "=" + value + expires + "; path=/;";
    };
    return CookiesService;
})();
exports.CookiesService = CookiesService;

},{}],38:[function(require,module,exports){
var EventType_1 = require("../../eventHubs/EventType");
var Disposer = (function () {
    function Disposer(hub, container, config, app) {
        var _this = this;
        this.container = container;
        this.config = config;
        this.app = app;
        var bindedDispose = this.dispose.bind(this);
        this.transportChannel = config.transport.mainChannel;
        setTimeout(bindedDispose, config.identification.visitTimeSpan);
        hub.bind([EventType_1.EventType.unload, EventType_1.EventType.beforeunload], function () { return _this.dispose(); });
        this.channelFactory = this.resolveChannel(this.transportChannel);
    }
    Disposer.prototype.resolveChannel = function (channelType) {
        return this.container.resolveNamedFactory(channelType, "channel");
    };
    Disposer.prototype.getSerializer = function () {
        return this.container.resolveNamed(this.transportChannel, "serializer");
    };
    Disposer.prototype.getChannel = function (channelSettings) {
        return this.channelFactory(channelSettings);
    };
    Disposer.prototype.dispose = function (shutdown) {
        this.transportChannel = this.config.transport.terminalChannel;
        this.metricAggregator.terminate();
        this.channelFactory = this.resolveChannel(this.transportChannel);
        this.container.dispose(shutdown);
        this.app.stop();
    };
    Disposer.prototype.shutdown = function () {
        this.dispose(true);
    };
    return Disposer;
})();
exports.Disposer = Disposer;

},{"../../eventHubs/EventType":6}],39:[function(require,module,exports){
var IdGenerator = (function () {
    function IdGenerator() {
    }
    IdGenerator.prototype.generate = function () {
        return Math.floor(Math.random() * IdGenerator.maxNumber);
    };
    IdGenerator.maxNumber = Math.pow(2, 53) - 1;
    return IdGenerator;
})();
exports.IdGenerator = IdGenerator;

},{}],40:[function(require,module,exports){
var IdentificationService = (function () {
    function IdentificationService(idGenerator, cookiesService, config) {
        this.idGenerator = idGenerator;
        this.cookiesService = cookiesService;
        this.config = config;
        this.cookie = "ctm";
        this.isNewIdentification = false;
        this.setOrAddIdentification();
        this.setIdentification();
    }
    IdentificationService.prototype.setIdentification = function () {
        this.identification = {
            Visit: this.storedIdentification.vst,
            Visitor: this.storedIdentification.vstr,
            PageView: this.storedIdentification.pgv,
            LastModified: this.storedIdentification.intr
        };
    };
    IdentificationService.prototype.getIdentification = function () {
        return this.identification;
    };
    IdentificationService.prototype.setOrAddIdentification = function () {
        var ctm = this.cookiesService.read("ctm");
        if (ctm) {
            try {
                var subject = JSON.parse(ctm);
                if (this.validate(subject)) {
                    if (!this.isInVisitRange(subject)) {
                        subject.vst = this.idGenerator.generate();
                    }
                    subject.pgv = this.idGenerator.generate();
                    subject.intr = Date.parse(new Date().toUTCString());
                    this.updateCookie(subject);
                    this.storedIdentification = subject;
                    return;
                }
            }
            catch (e) { }
        }
        this.createIdentification();
    };
    IdentificationService.prototype.isInVisitRange = function (identification) {
        return Date.parse(new Date().toUTCString()) - identification.intr < this.config.identification.visitTimeSpan;
    };
    IdentificationService.prototype.createIdentification = function () {
        this.updateCookie(this.storedIdentification = {
            pgv: this.idGenerator.generate(),
            vst: this.idGenerator.generate(),
            vstr: this.idGenerator.generate(),
            intr: Date.parse(new Date().toUTCString())
        });
        this.isNewIdentification = true;
    };
    IdentificationService.prototype.validate = function (identification) {
        return ["vst", "pgv", "vstr", "intr"].every(function (key) {
            var value;
            if (value = identification[key]) {
                return !isNaN(value);
            }
            return false;
        });
    };
    IdentificationService.prototype.modifyIdentification = function () {
        var now = Date.parse(new Date().toUTCString());
        this.storedIdentification.intr = this.identification.LastModified = now;
        this.updateCookie(this.storedIdentification);
    };
    IdentificationService.prototype.updateCookie = function (identification) {
        var value = JSON.stringify(identification);
        this.cookiesService.write(this.cookie, value, this.config.identification.expirationDays);
    };
    return IdentificationService;
})();
exports.IdentificationService = IdentificationService;

},{}],41:[function(require,module,exports){
var ObjectExtender = (function () {
    function ObjectExtender() {
    }
    ObjectExtender.extend = function (target) {
        var length = arguments.length, options, name, src, copy, copyIsArray, clone;
        for (var i = 1; i < length; i++) {
            if (options = arguments[i]) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (copy && (ObjectExtender.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && Array.isArray(src) ? src : [];
                        }
                        else {
                            clone = src && ObjectExtender.isPlainObject(src) ? src : {};
                        }
                        target[name] = ObjectExtender.extend(clone, copy);
                    }
                    else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    ObjectExtender.isPlainObject = function (obj) {
        if (ObjectExtender.type(obj) !== "object" || obj.nodeType || obj === window) {
            return false;
        }
        if (obj.constructor && !ObjectExtender.hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
            return false;
        }
        // If the function hasn't returned already, we're confident that
        // |obj| is a plain object, created by {} or constructed with new Object
        return true;
    };
    ObjectExtender.type = function (obj) {
        if (obj == null) {
            return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ?
            ObjectExtender.class2type[ObjectExtender.toString.call(obj)] || "object" :
            typeof obj;
    };
    ObjectExtender.class2type = {};
    ObjectExtender.toString = ObjectExtender.class2type.toString;
    ObjectExtender.hasOwn = ObjectExtender.class2type.hasOwnProperty;
    return ObjectExtender;
})();
exports.ObjectExtender = ObjectExtender;

},{}],42:[function(require,module,exports){
var UserAgentService = (function () {
    function UserAgentService(userAgent) {
        this.tokenizer = / (\w+)(?:\/([\w\.]+))? (?:(\([^\)]+\)) )?/img;
        this.userAgent = this.detect(" " + (userAgent || navigator.userAgent) + " ");
        this.isBrowserSupported = this.checkBrowserSupport(this.userAgent.browser, this.userAgent.is);
    }
    UserAgentService.prototype.detect = function (userAgent) {
        var xhr = window.XMLHttpRequest;
        var tokens = this.tokenize(userAgent);
        var result = { is: { mobile: false }, browser: { version: 6 /* NotSupported */ } };
        var browser = result.browser;
        var mozExtra = tokens.Mozilla && tokens.Mozilla.extra ? tokens.Mozilla.extra : null;
        var supports = result.supports = {
            sendBeacon: !!navigator.sendBeacon,
            binaryTransport: xhr && "withCredentials" in new XMLHttpRequest
        };
        if (tokens.Opera) {
            browser.version = 0;
            browser.type = 1 /* Opera */;
            return result;
        }
        if (tokens.Edge) {
            browser.type = 0 /* Edge */;
            browser.version = parseInt(tokens.Edge.value);
            result.is.mobile = userAgent.indexOf("Windows Phone; ") !== -1;
            return result;
        }
        if (mozExtra) {
            var index;
            var msieIndex = mozExtra.indexOf("MSIE ");
            var tridentIndex = mozExtra.indexOf("; Trident/");
            var isIE = msieIndex + tridentIndex > -1;
            if (isIE) {
                index = msieIndex !== -1 ? msieIndex : mozExtra.indexOf("; rv:");
                if (index !== -1) {
                    browser.type = 7 /* InternetExplorer */;
                    browser.version = parseFloat(mozExtra.substr(index + 5, 3));
                    result.is.mobile = mozExtra.indexOf("; Touch") !== -1 || mozExtra.indexOf("; IEMobile/") !== -1;
                    return result;
                }
            }
        }
        if (tokens.Firefox && tokens.Firefox.value) {
            browser.type = 5 /* FireFox */;
            browser.version = parseFloat(tokens.Firefox.value);
            result.is.mobile = mozExtra && mozExtra.indexOf("Android; ") !== -1;
            return result;
        }
        if ((tokens.Chrome && tokens.Chrome.value || tokens.CriOS && tokens.CriOS.value) && !tokens.Version) {
            browser.type = 3 /* Chrome */;
            browser.version = parseFloat(tokens.Chrome ? tokens.Chrome.value : tokens.CriOS.value);
            result.is.mobile = tokens.CriOS || mozExtra && mozExtra.indexOf("; Android ") !== -1;
            return result;
        }
        if (tokens.Safari) {
            if (mozExtra && mozExtra.indexOf("; Android ") !== -1 && tokens.AppleWebKit && tokens.AppleWebKit.value) {
                browser.type = 2 /* WebKit */;
                browser.version = parseFloat(tokens.AppleWebKit.value);
                result.is.mobile = true;
                return result;
            }
            if (mozExtra && mozExtra.indexOf("Windows") === -1 && tokens.Version && tokens.Version.value) {
                browser.type = 4 /* Safari */;
                browser.version = parseFloat(tokens.Version.value);
                result.is.mobile = !!tokens.Mobile;
            }
        }
        return result;
    };
    UserAgentService.prototype.checkBrowserSupport = function (browser, device) {
        return browser.type === 0 /* Edge */ && !device.mobile ||
            browser.type === 3 /* Chrome */ && browser.version >= 9 ||
            browser.type === 2 /* WebKit */ && browser.version >= 534 ||
            browser.type === 5 /* FireFox */ && browser.version >= 25 && !device.mobile ||
            browser.type === 4 /* Safari */ && browser.version >= 5.1 && browser.version <= 10 ||
            browser.type === 7 /* InternetExplorer */ && browser.version > 9 && !device.mobile;
    };
    UserAgentService.prototype.tokenize = function (userAgent) {
        var tokens = {};
        var token;
        while (token = this.tokenizer.exec(userAgent)) {
            tokens[token[1]] = {
                value: token[2],
                extra: token[3]
            };
            this.tokenizer.lastIndex--;
        }
        return tokens;
    };
    return UserAgentService;
})();
exports.UserAgentService = UserAgentService;

},{}],43:[function(require,module,exports){
var AbstractTransportChannel = (function () {
    function AbstractTransportChannel(settings) {
        this.settings = settings;
    }
    AbstractTransportChannel.prototype.onRequestSuccess = function (envelope) {
        this.reset();
        this.settings.sendPromise.resolve(envelope);
    };
    AbstractTransportChannel.prototype.onRequestFailure = function (envelope) {
        var _this = this;
        this.reset();
        setTimeout(function () {
            _this.settings.sendPromise.reject(envelope);
        }, this.settings.waitInterval);
    };
    return AbstractTransportChannel;
})();
exports.AbstractTransportChannel = AbstractTransportChannel;

},{}],44:[function(require,module,exports){
var BeaconTransportChannel = (function () {
    function BeaconTransportChannel(settings) {
        this.settings = settings;
    }
    BeaconTransportChannel.prototype.send = function (url, envelope) {
        var data = envelope.message.data;
        if (navigator.sendBeacon(url + "&" + data)) {
            this.settings.sendPromise.resolve(envelope);
        }
        else {
            this.settings.sendPromise.reject(envelope);
        }
    };
    return BeaconTransportChannel;
})();
exports.BeaconTransportChannel = BeaconTransportChannel;

},{}],45:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractTransportChannel_1 = require("./AbstractTransportChannel");
var ImageTransportChannel = (function (_super) {
    __extends(ImageTransportChannel, _super);
    function ImageTransportChannel(settings) {
        _super.call(this, settings);
        this.image = new Image();
    }
    ImageTransportChannel.prototype.send = function (url, envelope) {
        var _this = this;
        var data = envelope.message.data;
        this.image.onload = function () {
            _this.onRequestSuccess(envelope);
        };
        this.image.onerror = function () {
            _this.onRequestFailure(envelope);
        };
        this.image.src += url + "&" + data + "&r=" + Date.now();
    };
    ImageTransportChannel.prototype.reset = function () {
        this.image = this.image.onerror = this.image.onload = null;
    };
    return ImageTransportChannel;
})(AbstractTransportChannel_1.AbstractTransportChannel);
exports.ImageTransportChannel = ImageTransportChannel;

},{"./AbstractTransportChannel":43}],46:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractTransportChannel_1 = require("./AbstractTransportChannel");
var TransportChannelXhr = (function (_super) {
    __extends(TransportChannelXhr, _super);
    function TransportChannelXhr(settings) {
        _super.call(this, settings);
        this.xhr = new XMLHttpRequest();
    }
    TransportChannelXhr.prototype.send = function (url, envelope) {
        var _this = this;
        var xhr = this.xhr;
        var data = envelope.message.data;
        try {
            xhr.open("POST", url);
            xhr.timeout = 30000;
            xhr.setRequestHeader("Content-Type", "text/plain");
            this.xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        _this.onRequestSuccess(envelope);
                    }
                    else {
                        _this.onRequestFailure(envelope);
                    }
                }
            };
            xhr.onload = function () {
                _this.onRequestSuccess(envelope);
            };
            xhr.onerror = xhr.ontimeout = xhr.onabort = function () {
                _this.onRequestFailure(envelope);
            };
            xhr.send(data);
        }
        catch (ex) {
            this.onRequestFailure(envelope);
        }
    };
    TransportChannelXhr.prototype.reset = function () {
        this.xhr = this.xhr.onabort = this.xhr.ontimeout = this.xhr.onerror = this.xhr.onload = this.xhr.onreadystatechange = null;
    };
    return TransportChannelXhr;
})(AbstractTransportChannel_1.AbstractTransportChannel);
exports.TransportChannelXhr = TransportChannelXhr;

},{"./AbstractTransportChannel":43}]},{},[2])(2)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
if (typeof window.ClickTaleMonitorOnReady === "function"){ ClickTaleMonitorOnReady(); } }();