!function() {(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ClickTaleMonitor = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var Hub_1 = require("../eventHubs/Hub");
var Container_1 = require("../ioc/Container");
var IdMetric_1 = require("../metrics/IdMetric");
var Configuration_1 = require("../config/Configuration");
var Disposer_1 = require("../services/disposer/Disposer");
var MetricsReader_1 = require("../metrics/MetricsReader");
var VersionMetric_1 = require("../metrics/VersionMetric");
var BrowserMetric_1 = require("../metrics/BrowserMetric");
var EventIdsMetric_1 = require("../metrics/EventIdsMetric");
var LocationMetric_1 = require("../metrics/LocationMetric");
var MetricsPromise_1 = require("../metrics/MetricsPromise");
var JSONSerializer_1 = require("../messaging/JSONSerializer");
var AttentionMetric_1 = require("../metrics/AttentionMetric");
var ProjectIdMetric_1 = require("../metrics/ProjectIdMetric");
var TimeOnPageMetric_1 = require("../metrics/TimeOnPageMetric");
var MetricAggregator_1 = require("../metrics/MetricAggregator");
var ScrollReachMetric_1 = require("../metrics/ScrollReachMetric");
var IdGenerator_1 = require("../services/idGenerator/IdGenerator");
var IsNewVisitorMetric_1 = require("../metrics/IsNewVisitorMetric");
var JSErrorCountMetric_1 = require("../metrics/JSErrorCountMetric");
var CookiesService_1 = require("../services/cookies/CookiesService");
var CompositeInactivity_1 = require("../metrics/CompositeInactivity");
var BrowserVersionMetric_1 = require("../metrics/BrowserVersionMetric");
var LackOfInterestMetric_1 = require("../metrics/LackOfInterestMetric");
var NumberOfClicksMetric_1 = require("../metrics/NumberOfClicksMetric");
var XhrTransportChannel_1 = require("../transport/XhrTransportChannel");
var ResolutionWidthMetric_1 = require("../metrics/ResolutionWidthMetric");
var DistributionService_1 = require("../distribution/DistributionService");
var UserAgentService_1 = require("../services/userAgent/UserAgentService");
var QueryStringSerializer_1 = require("../messaging/QueryStringSerializer");
var ImageTransportChannel_1 = require("../transport/ImageTransportChannel");
var DocumentReferrerMetric_1 = require("../metrics/DocumentReferrerMetric");
var PeriodicalNotifierRule_1 = require("../metrics/PeriodicalNotifierRule");
var ResolutionHeightMetric_1 = require("../metrics/ResolutionHeightMetric");
var BeaconTransportChannel_1 = require("../transport/BeaconTransportChannel");
var VisitIdentificationMetric_1 = require("../metrics/VisitIdentificationMetric");
var DOMLContentLoadedTimeMetric_1 = require("../metrics/DOMLContentLoadedTimeMetric");
var VisitorIdentificationMetric_1 = require("../metrics/VisitorIdentificationMetric");
var PageViewIdentificationMetric_1 = require("../metrics/PageViewIdentificationMetric");
var IdentificationService_1 = require("../services/identification/IdentificationService");
var EngagementTimeAggregatorMetric_1 = require("../metrics/EngagementTimeAggregatorMetric");
var App = (function () {
    function App(projectId) {
        var _this = this;
        this.projectId = projectId;
        this.bootstrap(function () {
            if (_this.tryRegisterComponents()) {
                _this.start();
            }
        });
    }
    App.prototype.bootstrap = function (callback) {
        if (!App.isMonitoring) {
            if (/complete|interactive/.test(document.readyState)) {
                return callback();
            }
            document.addEventListener("DOMContentLoaded", callback, false);
        }
    };
    App.prototype.start = function () {
        var disposer = App.container.resolve("Disposer");
        App.isMonitoring = true;
        App.container.resolve("Hub");
        App.container.resolve("CompositeInactivity");
        App.container.resolve("MetricsReader");
        App.container.resolve("DistributionService");
        disposer.metricAggregator = App.container.resolve("MetricAggregator");
    };
    App.prototype.tryRegisterComponents = function () {
        var _this = this;
        var userAgentService = new UserAgentService_1.UserAgentService();
        if (userAgentService.isBrowserSupported) {
            App.container = new Container_1.Container();
            this.eventRepository = new EventIdsMetric_1.EventIdsMetric();
            App.container.register("Hub", function (c) { return new Hub_1.Hub(userAgentService); });
            App.container.registerInstance(userAgentService);
            App.registerTransportChannels(userAgentService.userAgent, Configuration_1.Configuration);
            App.container.register("IdGenerator", function (c) { return new IdGenerator_1.IdGenerator(); });
            App.container.register("VersionMetric", function (c) { return new VersionMetric_1.VersionMetric(); });
            App.container.register("LocationMetric", function (c) { return new LocationMetric_1.LocationMetric(); });
            App.container.register("CookiesService", function (c) { return new CookiesService_1.CookiesService(); });
            App.container.register("BrowserMetric", function (c) { return new BrowserMetric_1.BrowserMetric(userAgentService); });
            App.container.register("ResolutionWidthMetric", function (c) { return new ResolutionWidthMetric_1.ResolutionWidthMetric(); });
            App.container.registerNamedInstance("EventIdsMetric", this.eventRepository);
            App.container.register("ProjectIdMetric", function (c) { return new ProjectIdMetric_1.ProjectIdMetric(_this.projectId); });
            App.container.register("DocumentReferrerMetric", function (c) { return new DocumentReferrerMetric_1.DocumentReferrerMetric(); });
            App.container.register("ResolutionHeightMetric", function (c) { return new ResolutionHeightMetric_1.ResolutionHeightMetric(); });
            App.container.register("IdMetric", function (c, id) { return new IdMetric_1.IdMetric(id); }).asTransient();
            App.container.register("AttentionMetric", function (c) { return new AttentionMetric_1.AttentionMetric(performance.timing); });
            App.container.register("BrowserVersionMetric", function (c) { return new BrowserVersionMetric_1.BrowserVersionMetric(userAgentService); });
            App.container.register("ScrollReachMetric", function (c) { return new ScrollReachMetric_1.ScrollReachMetric(c.resolve("Hub")); });
            App.container.register("JSErrorCountMetric", function (c) { return new JSErrorCountMetric_1.JSErrorCountMetric(c.resolve("Hub")); });
            App.container.register("LackOfInterestMetric", function (c) { return new LackOfInterestMetric_1.LackOfInterestMetric(performance.timing); });
            App.container.register(Configuration_1.Configuration.transport.mainChannel + " serializer", function (c) { return new JSONSerializer_1.JSONSerializer(); });
            App.container.register("NumberOfClicksMetric", function (c) { return new NumberOfClicksMetric_1.NumberOfClicksMetric(c.resolve("Hub")); });
            App.container.register("PeriodicalNotifierRule", function (c) { return new PeriodicalNotifierRule_1.PeriodicalNotifierRule(Configuration_1.Configuration); });
            App.container.register(Configuration_1.Configuration.transport.terminalChannel + " serializer", function (c) { return new QueryStringSerializer_1.QueryStringSerializer(); });
            App.container.register("DOMLContentLoadedTimeMetric", function (c) { return new DOMLContentLoadedTimeMetric_1.DOMLContentLoadedTimeMetric(performance.timing); });
            App.container.register("TimeOnPageMetric", function (c) { return new TimeOnPageMetric_1.TimeOnPageMetric(c.resolve("Hub"), performance.timing); });
            App.container.register("Disposer", function (c) { return new Disposer_1.Disposer(c.resolve("Hub"), c, Configuration_1.Configuration, _this); }).ownedExternally();
            App.container.register("MetricsPromise", function (c) { return new MetricsPromise_1.MetricsPromise(c.resolve("MetricAggregator")); });
            App.container.register("IsNewVisitorMetric", function (c) { return new IsNewVisitorMetric_1.IsNewVisitorMetric(c.resolve("IdentificationService")); });
            App.container.register("VisitIdentificationMetric", function (c) { return new VisitIdentificationMetric_1.VisitIdentificationMetric(c.resolve("IdentificationService")); });
            App.container.register("VisitorIdentificationMetric", function (c) { return new VisitorIdentificationMetric_1.VisitorIdentificationMetric(c.resolve("IdentificationService")); });
            App.container.register("PageViewIdentificationMetric", function (c) { return new PageViewIdentificationMetric_1.PageViewIdentificationMetric(c.resolve("IdentificationService")); });
            App.container.register("EngagementTimeAggregatorMetric", function (c) { return new EngagementTimeAggregatorMetric_1.EngagementTimeAggregatorMetric(c.resolve("Hub"), Configuration_1.Configuration, performance.timing); });
            App.container.register("DistributionService", function (c) { return new DistributionService_1.DistributionService(_this, Configuration_1.Configuration, c.resolve("Hub"), c, c.resolve("Disposer")); });
            App.container.register("CompositeInactivity", function (c) { return new CompositeInactivity_1.CompositeInactivity(c.resolve("Hub"), c.resolve("LackOfInterestMetric"), c.resolve("AttentionMetric")); });
            App.container.register("IdentificationService", function (c) { return new IdentificationService_1.IdentificationService(c.resolve("IdGenerator"), c.resolve("CookiesService"), Configuration_1.Configuration); });
            App.container.register("MetricAggregator", function (c) {
                var metricArray = Configuration_1.Configuration.metrics.providers.map(function (metric) { return c.resolve(metric); });
                metricArray = metricArray.concat([
                    c.resolve("VersionMetric"),
                    c.resolve("LocationMetric"),
                    c.resolve("ProjectIdMetric"),
                    c.resolve("DocumentReferrerMetric"),
                    c.resolve("VisitIdentificationMetric"),
                    c.resolve("DOMLContentLoadedTimeMetric"),
                    c.resolve("VisitorIdentificationMetric"),
                    c.resolve("PageViewIdentificationMetric")
                ]);
                return new MetricAggregator_1.MetricAggregator(metricArray, c.resolve("Hub"), Configuration_1.Configuration, c.resolveFactory("IdMetric"), c.resolve("Disposer"));
            });
            App.container.register("MetricsReader", function (c) {
                var promise = c.resolve("MetricsPromise");
                return new MetricsReader_1.MetricsReader([
                    promise,
                    c.resolve("PeriodicalNotifierRule")], c.resolve("Hub"), c.resolve("MetricAggregator"), c.resolve("DistributionService"), promise, c.resolve("IdentificationService"));
            });
            return true;
        }
        return false;
    };
    App.prototype.shutdown = function () {
        this.dispose(true);
    };
    App.prototype.dispose = function (shutdown) {
        var disposer = App.container.resolve("Disposer");
        disposer.dispose(shutdown);
    };
    App.prototype.stop = function () {
        App.isMonitoring = false;
    };
    App.prototype.isMonitoring = function () {
        return App.isMonitoring;
    };
    App.prototype.setIdentification = function (identification) {
        var identificationService = App.container.resolve("IdentificationService");
        identificationService.setIdentification(identification);
    };
    App.registerTransportChannels = function (userAgent, config) {
        var transportConfig = config.transport;
        var browserType = userAgent.browser.type;
        var transportChannelTerminal = userAgent.supports.sendBeacon ? BeaconTransportChannel_1.BeaconTransportChannel : ImageTransportChannel_1.ImageTransportChannel;
        App.container.register(transportConfig.terminalChannel + " channel", function (c, settings) { return new transportChannelTerminal(settings); }).ownedExternally();
        App.container.register(transportConfig.mainChannel + " channel", function (c, settings) { return new XhrTransportChannel_1.TransportChannelXhr(settings); }).asTransient().ownedExternally();
    };
    App.prototype.addEvent = function (eventId) {
        this.eventRepository.addEvent(eventId);
    };
    App.isMonitoring = false;
    return App;
}());
exports.App = App;

},{"../config/Configuration":5,"../distribution/DistributionService":6,"../eventHubs/Hub":8,"../ioc/Container":9,"../messaging/JSONSerializer":14,"../messaging/QueryStringSerializer":15,"../metrics/AttentionMetric":21,"../metrics/BrowserMetric":22,"../metrics/BrowserVersionMetric":23,"../metrics/CompositeInactivity":24,"../metrics/DOMLContentLoadedTimeMetric":25,"../metrics/DocumentReferrerMetric":26,"../metrics/EngagementTimeAggregatorMetric":27,"../metrics/EventIdsMetric":28,"../metrics/IdMetric":29,"../metrics/IsNewVisitorMetric":30,"../metrics/JSErrorCountMetric":31,"../metrics/LackOfInterestMetric":32,"../metrics/LocationMetric":33,"../metrics/MetricAggregator":34,"../metrics/MetricsPromise":36,"../metrics/MetricsReader":37,"../metrics/NumberOfClicksMetric":38,"../metrics/PageViewIdentificationMetric":39,"../metrics/PeriodicalNotifierRule":40,"../metrics/ProjectIdMetric":41,"../metrics/ResolutionHeightMetric":42,"../metrics/ResolutionWidthMetric":43,"../metrics/ScrollReachMetric":44,"../metrics/TimeOnPageMetric":45,"../metrics/VersionMetric":46,"../metrics/VisitIdentificationMetric":47,"../metrics/VisitorIdentificationMetric":48,"../services/cookies/CookiesService":49,"../services/disposer/Disposer":50,"../services/idGenerator/IdGenerator":51,"../services/identification/IdentificationService":52,"../services/userAgent/UserAgentService":54,"../transport/BeaconTransportChannel":56,"../transport/ImageTransportChannel":57,"../transport/XhrTransportChannel":58}],2:[function(require,module,exports){
"use strict";
var App_1 = require("./App");
exports.App = App_1.App;

},{"./App":1}],3:[function(require,module,exports){
"use strict";
var EventType;
(function (EventType) {
    EventType[EventType["error"] = 0] = "error";
    EventType[EventType["keyup"] = 1] = "keyup";
    EventType[EventType["scroll"] = 2] = "scroll";
    EventType[EventType["resize"] = 3] = "resize";
    EventType[EventType["unload"] = 4] = "unload";
    EventType[EventType["online"] = 5] = "online";
    EventType[EventType["mouseup"] = 6] = "mouseup";
    EventType[EventType["offline"] = 7] = "offline";
    EventType[EventType["mousedown"] = 8] = "mousedown";
    EventType[EventType["mouseover"] = 9] = "mouseover";
    EventType[EventType["touchstart"] = 10] = "touchstart";
    EventType[EventType["beforeunload"] = 11] = "beforeunload";
    EventType[EventType["visibilitychange"] = 12] = "visibilitychange";
})(EventType || (EventType = {}));
exports.EventType = EventType;

},{}],4:[function(require,module,exports){
"use strict";
var Dictionary = (function () {
    function Dictionary() {
    }
    Dictionary.prototype.add = function (key, value) {
        this[key.toString()] = value;
    };
    Dictionary.prototype.remove = function (key) {
        delete this[key.toString()];
    };
    Dictionary.prototype.containsKey = function (key) {
        return !!this[key.toString()];
    };
    Dictionary.prototype.tryGetValue = function (key, entry) {
        var value = this[key.toString()];
        if (value) {
            entry.out = value;
            return true;
        }
        return false;
    };
    Dictionary.prototype.clear = function () {
        var _this = this;
        Object.keys(this).forEach(function (key) {
            delete _this[key];
        });
    };
    Dictionary.prototype.values = function () {
        var _this = this;
        return Object.keys(this).map(function (key) {
            return _this[key];
        });
    };
    return Dictionary;
}());
exports.Dictionary = Dictionary;

},{}],5:[function(require,module,exports){
"use strict";
var ObjectExtender_1 = require("../services/objectExtender/ObjectExtender");
var userConfig = window.ClickTaleMonitorSettings;
var Configuration = {
    metrics: {
        inactivityTime: 20000,
        maxFetchInterval: 10000,
        providers: [
            "BrowserMetric",
            "EventIdsMetric",
            "TimeOnPageMetric",
            "ScrollReachMetric",
            "IsNewVisitorMetric",
            "JSErrorCountMetric",
            "NumberOfClicksMetric",
            "BrowserVersionMetric",
            "ResolutionWidthMetric",
            "ResolutionHeightMetric",
            "EngagementTimeAggregatorMetric"
        ]
    },
    identification: {
        expirationDays: 365,
        visitTimeSpan: 1800000
    },
    transport: {
        url: "https://",
        mainChannel: "main",
        terminalChannel: "terminal"
    },
    distribution: {
        relaibleMessages: {
            retries: 2,
            waitInterval: 1000
        }
    }
};
exports.Configuration = Configuration;
Configuration = ObjectExtender_1.ObjectExtender.extend(Configuration, userConfig);

},{"../services/objectExtender/ObjectExtender":53}],6:[function(require,module,exports){
"use strict";
var EventType_1 = require("../eventHubs/EventType");
var Dictionary_1 = require("../collections/Dictionary");
var DistributionService = (function () {
    function DistributionService(app, config, hub, container, channelFactory) {
        var _this = this;
        this.app = app;
        this.config = config;
        this.hub = hub;
        this.container = container;
        this.channelFactory = channelFactory;
        this.isBrowserOnline = false;
        this.envelopeMap = new Dictionary_1.Dictionary();
        this.transportUrl = config.transport.url;
        this.channelSettings = {
            sendPromise: {
                reject: this.onTransportFailure,
                resolve: this.onTransportSuccess,
            },
            waitInterval: config.distribution.relaibleMessages.waitInterval
        };
        this.isBrowserOnline = navigator.onLine;
        this.hub.bind([EventType_1.EventType.online, EventType_1.EventType.offline], function () { return _this.isBrowserOnline = navigator.onLine; });
    }
    DistributionService.prototype.process = function (data, metrics) {
        var envelope;
        var message = { data: data };
        var outResult = {};
        if (!metrics.reliable || !this.envelopeMap.tryGetValue(metrics.id, outResult)) {
            envelope = {
                message: message,
                metrics: metrics,
                retries: this.config.distribution.relaibleMessages.retries
            };
            this.envelopeMap.add(metrics.id, envelope);
        }
        else {
            envelope = outResult.out;
            if (--envelope.retries < 0) {
                return this.app.shutdown();
            }
        }
        this.distributeEnvelope(envelope);
    };
    DistributionService.prototype.distributeEnvelope = function (envelope) {
        if (this.isBrowserOnline) {
            var url = this.transportUrl + "?t=" + envelope.metrics.type;
            var channel = this.channelFactory.getChannel(this.channelSettings);
            channel.send(url, envelope);
        }
    };
    DistributionService.prototype.onTransportSuccess = function (envelope) {
        envelope.metrics.promise.resolve(envelope.metrics);
    };
    DistributionService.prototype.onTransportFailure = function (envelope) {
        envelope.metrics.promise.reject(envelope.metrics);
    };
    return DistributionService;
}());
exports.DistributionService = DistributionService;

},{"../collections/Dictionary":4,"../eventHubs/EventType":7}],7:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"dup":3}],8:[function(require,module,exports){
"use strict";
var EventType_1 = require("../eventHubs/EventType");
var Dictionary_1 = require("../collections/Dictionary");
var Hub = (function () {
    function Hub(userAgentService) {
        this.userAgentService = userAgentService;
        this.bindedPublish = this.publish.bind(this);
        this.subscribers = new Dictionary_1.Dictionary();
        this.documentEvents = [EventType_1.EventType.mousedown, EventType_1.EventType.mouseover, EventType_1.EventType.mouseup, EventType_1.EventType.keyup, EventType_1.EventType.visibilitychange];
        this.userEvents = [EventType_1.EventType.mouseover, EventType_1.EventType.mouseup, EventType_1.EventType.keyup, EventType_1.EventType.scroll, EventType_1.EventType.resize];
        this.windowEvents = [EventType_1.EventType.scroll, EventType_1.EventType.resize, EventType_1.EventType.online, EventType_1.EventType.offline, EventType_1.EventType.error, EventType_1.EventType.beforeunload, EventType_1.EventType.unload];
        this.init();
    }
    Hub.prototype.init = function () {
        var _this = this;
        if (this.userAgentService.userAgent.is.mobile) {
            this.userEvents.push(EventType_1.EventType.touchstart);
            this.documentEvents.push(EventType_1.EventType.touchstart);
        }
        this.documentEvents.concat(this.windowEvents).forEach(function (eventType) {
            _this.subscribers[eventType] = new Array();
        });
        this.bindBrowserEvents();
    };
    Hub.prototype.bind = function (eventTypes, callback) {
        this.bindInternal(eventTypes, callback);
    };
    Hub.prototype.unbind = function (eventTypes, callback) {
        var _this = this;
        eventTypes.forEach(function (eventType) {
            if (_this.subscribers) {
                var listeners = _this.subscribers[eventType];
                var index = listeners.indexOf(callback);
                if (index > -1) {
                    listeners.splice(index, 1);
                }
            }
        });
    };
    Hub.prototype.bindTop = function (eventTypes, callback) {
        this.bindInternal(eventTypes, callback, true);
    };
    Hub.prototype.bindInternal = function (eventTypes, callback, top) {
        var _this = this;
        if (top === void 0) { top = false; }
        var insertFn = top ? function (subs) { return subs.splice(0, 0, callback); } : function (subs) { return subs.push(callback); };
        eventTypes.forEach(function (eventType) { return insertFn(_this.subscribers[eventType]); });
    };
    Hub.prototype.unbindAll = function () {
        this.subscribers = null;
    };
    Hub.prototype.publish = function (event) {
        var eventType = EventType_1.EventType[event.type];
        this.subscribers[eventType].forEach(function (callback) { return callback(event); });
    };
    Hub.prototype.dispose = function (shutdown) {
        this.unbindAll();
        this.unbindBrowserEvents();
    };
    Hub.prototype.bindBrowserEvents = function () {
        var addEventListenerFactory = function (eventListenerRegistrator) {
            return eventListenerRegistrator.addEventListener;
        };
        this.bindUnbindBrowserEvent(addEventListenerFactory, window, this.windowEvents, this.bindedPublish);
        this.bindUnbindBrowserEvent(addEventListenerFactory, document, this.documentEvents, this.bindedPublish);
    };
    Hub.prototype.unbindBrowserEvents = function () {
        var removeEventListenerFactory = function (eventListenerRegistrator) {
            return eventListenerRegistrator.removeEventListener;
        };
        this.bindUnbindBrowserEvent(removeEventListenerFactory, window, this.windowEvents, this.bindedPublish);
        this.bindUnbindBrowserEvent(removeEventListenerFactory, document, this.documentEvents, this.bindedPublish);
    };
    Hub.prototype.bindUnbindBrowserEvent = function (factory, registrator, eventTypes, eventListener) {
        eventTypes.forEach(function (eventType) {
            var event = EventType_1.EventType[eventType];
            var eventListenerDefinition = factory(registrator);
            eventListenerDefinition.apply(registrator, [event, eventListener, false]);
        });
    };
    return Hub;
}());
exports.Hub = Hub;

},{"../collections/Dictionary":4,"../eventHubs/EventType":7}],9:[function(require,module,exports){
"use strict";
var ServiceKey_1 = require("./ServiceKey");
var Dictionary_1 = require("../collections/Dictionary");
var GenericServiceEntry_1 = require("./GenericServiceEntry");
var Container = (function () {
    function Container() {
        this.defaultOwner = 0 /* container */;
        this.defaultReuse = 0 /* container */;
        this.disposables = new Array();
        this.services = new Dictionary_1.Dictionary();
        var serviceEntry = GenericServiceEntry_1.GenericServiceEntry.build({
            instance: this,
            factory: function (c) { return c; },
            container: this,
            owner: 1 /* external */,
            reuse: 0 /* container */
        });
        this.services.add(new ServiceKey_1.ServiceKey(Container), serviceEntry);
    }
    Container.prototype.dispose = function (shutdown) {
        while (this.disposables.length > 0) {
            var disposable = this.disposables.shift();
            disposable.dispose(shutdown);
        }
    };
    Container.prototype.register = function (ctor, factory) {
        return this.registerNamed(ctor, null, factory);
    };
    Container.prototype.registerInstance = function (instance) {
        this.registerNamedInstance(null, instance);
    };
    Container.prototype.registerNamedInstance = function (name, instance) {
        var proto = Object.getPrototypeOf(instance);
        var ctor = proto.constructor;
        var entry = this.registerImpl(ctor, name, null);
        entry.asSingleton()
            .ownedExternally();
        entry.initializeInstance(instance);
    };
    Container.prototype.registerNamed = function (ctor, name, factory) {
        return this.registerImpl(ctor, name, factory);
    };
    Container.prototype.registerImpl = function (ctor, name, factory) {
        var key = new ServiceKey_1.ServiceKey(ctor, name);
        var entry = GenericServiceEntry_1.GenericServiceEntry.build({
            container: this,
            factory: factory,
            reuse: this.defaultReuse,
            owner: this.defaultOwner
        });
        this.services.add(key, entry);
        return entry;
    };
    Container.prototype.resolve = function (ctor, arg1, arg2, arg3, arg4) {
        var args = [ctor, null, arg1, arg2, arg3, arg4];
        return this.resolveNamed.apply(this, args);
    };
    Container.prototype.resolveNamed = function (ctor, name, arg1, arg, arg3, arg4) {
        var args = Array.prototype.slice.call(arguments, 2);
        return this.resolveImpl(ctor, name, args);
    };
    Container.prototype.resolveFactory = function (ctor) {
        return this.resolveNamedFactory(ctor, null);
    };
    Container.prototype.resolveNamedFactory = function (ctor, name) {
        var instance;
        var entry = this.getEntry(ctor, name);
        if (!entry) {
            return function () { return null; };
        }
        return function (arg1, arg2, arg3, arg4) {
            var args = [entry.container, arg1, arg2, arg3, arg4];
            instance = entry.instance;
            if (!instance) {
                instance = entry.factory.apply(null, args);
                entry.initializeInstance(instance);
            }
            return instance;
        };
    };
    Container.prototype.resolveImpl = function (ctor, name, args) {
        var instance;
        var entry = this.getEntry(ctor, name);
        if (!entry) {
            return null;
        }
        instance = entry.instance;
        if (!instance) {
            args = args || [];
            args.splice(0, 0, entry.container);
            instance = entry.factory.apply(null, args);
            entry.initializeInstance(instance);
        }
        return instance;
    };
    Container.prototype.getEntry = function (ctor, serviceName) {
        var container = this;
        var entry;
        var key = new ServiceKey_1.ServiceKey(ctor, serviceName);
        var outResult = {};
        if (this.services.tryGetValue(key, outResult)) {
            entry = outResult.out;
        }
        return entry;
    };
    Container.prototype.trackDisposable = function (instance) {
        this.disposables.push(instance);
    };
    return Container;
}());
exports.Container = Container;

},{"../collections/Dictionary":4,"./GenericServiceEntry":10,"./ServiceKey":13}],10:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServiceEntry_1 = require("./ServiceEntry");
var GenericServiceEntry = (function (_super) {
    __extends(GenericServiceEntry, _super);
    function GenericServiceEntry(factory) {
        _super.call(this);
        this.factory = factory;
    }
    GenericServiceEntry.prototype.initializeInstance = function (instance) {
        var dynamicInstance = instance;
        if (this.reuse !== 1 /* none */) {
            this.instance = instance;
        }
        if (this.owner === 0 /* container */ && dynamicInstance.dispose) {
            this.container.trackDisposable(dynamicInstance);
        }
        if (this.initializer) {
            this.initializer(this.container, instance);
        }
    };
    GenericServiceEntry.prototype.initializedBy = function (initializer) {
        this.initializer = initializer;
        return this;
    };
    GenericServiceEntry.prototype.cloneFor = function (newContainer) {
        return GenericServiceEntry.build({
            reuse: this.reuse,
            owner: this.owner,
            factory: this.factory,
            container: newContainer,
            initializer: this.initializer
        });
    };
    GenericServiceEntry.build = function (bag) {
        var serviceEntry = new GenericServiceEntry(bag.factory);
        serviceEntry.owner = bag.owner;
        serviceEntry.reuse = bag.reuse;
        serviceEntry.instance = bag.instance;
        serviceEntry.container = bag.container;
        serviceEntry.initializer = bag.initializer;
        return serviceEntry;
    };
    return GenericServiceEntry;
}(ServiceEntry_1.ServiceEntry));
exports.GenericServiceEntry = GenericServiceEntry;

},{"./ServiceEntry":12}],11:[function(require,module,exports){
"use strict";
var NameResolver = (function () {
    function NameResolver() {
    }
    NameResolver.resolve = function (ctor) {
        var func = ctor;
        if (typeof ctor === "string") {
            return ctor;
        }
        return func.name || NameResolver.resolveByCode(func);
    };
    NameResolver.resolveByCode = function (ctor) {
        var match = ctor.toString().match(NameResolver.nameRegex);
        return (match && match.length > 0 && match[1]) || NameResolver.resolveByPrototype(ctor);
    };
    NameResolver.resolveByPrototype = function (ctor) {
        var buffer = new Array();
        var prototype = ctor.prototype;
        for (var item in prototype) {
            buffer.push(item);
        }
        return buffer.join("");
    };
    NameResolver.nameRegex = /function ([^\(]+)/;
    return NameResolver;
}());
exports.NameResolver = NameResolver;

},{}],12:[function(require,module,exports){
"use strict";
var ServiceEntry = (function () {
    function ServiceEntry() {
    }
    ServiceEntry.prototype.ownedByContainer = function () {
        this.owner = 0 /* container */;
    };
    ServiceEntry.prototype.ownedExternally = function () {
        this.owner = 1 /* external */;
        return this;
    };
    ServiceEntry.prototype.asSingleton = function () {
        this.reuse = 0 /* container */;
        return this;
    };
    ServiceEntry.prototype.asTransient = function () {
        this.reuse = 1 /* none */;
        return this;
    };
    return ServiceEntry;
}());
exports.ServiceEntry = ServiceEntry;

},{}],13:[function(require,module,exports){
"use strict";
var NameResolver_1 = require("./NameResolver");
var ServiceKey = (function () {
    function ServiceKey(ctor, serviceName) {
        this.ctor = ctor;
        this.serviceName = serviceName;
        this.key = serviceName || NameResolver_1.NameResolver.resolve(ctor);
    }
    ServiceKey.prototype.toString = function () {
        return this.key;
    };
    return ServiceKey;
}());
exports.ServiceKey = ServiceKey;

},{"./NameResolver":11}],14:[function(require,module,exports){
"use strict";
var MetricType_1 = require("../metrics/MetricType");
var JSONSerializer = (function () {
    function JSONSerializer() {
    }
    JSONSerializer.prototype.serialize = function (value) {
        var result = {};
        value.forEach(function (metric) { return result[MetricType_1.MetricType[metric.type]] = metric.value; });
        return JSON.stringify(result);
    };
    return JSONSerializer;
}());
exports.JSONSerializer = JSONSerializer;

},{"../metrics/MetricType":35}],15:[function(require,module,exports){
"use strict";
var QueryStringSerializer = (function () {
    function QueryStringSerializer() {
    }
    QueryStringSerializer.prototype.serialize = function (value) {
        var builder = [];
        value.forEach(function (item) {
            builder.push(item.type + "=" + encodeURIComponent(item.value));
        });
        return builder.join("&");
    };
    return QueryStringSerializer;
}());
exports.QueryStringSerializer = QueryStringSerializer;

},{}],16:[function(require,module,exports){
"use strict";
var AbstractActivityMetric = (function () {
    function AbstractActivityMetric(timing) {
        this.isLast = false;
        this.oneTime = false;
        this.inactivityDetectedTime = 0;
        this.inactivityDetected = false;
        this.inactivityAggregatedTime = 0;
        this.navigationStart = timing.navigationStart;
    }
    /**
    *  In case there are preceding calls to getMetric() during the inactivity period,
    *  this function will be called and the inactivityDetected flag will remain true.
    *  In order to avoid overlapping time accumulations we have to take the time difference
    *  between the current call and the previous one, by setting the inactivityDetectedTime
    *  to current time.
    */
    AbstractActivityMetric.prototype.tryAccumulateInactivityTime = function () {
        var now = Date.now();
        if (this.inactivityDetected) {
            this.inactivityAggregatedTime += now - this.inactivityDetectedTime;
            this.inactivityDetectedTime = now;
        }
    };
    AbstractActivityMetric.prototype.markActivity = function () {
        this.tryAccumulateInactivityTime();
        this.inactivityDetected = false;
    };
    AbstractActivityMetric.prototype.markInactivity = function () {
        this.inactivityDetected = true;
        this.inactivityDetectedTime = Date.now();
    };
    AbstractActivityMetric.prototype.getMetric = function () {
        this.tryAccumulateInactivityTime();
        return {
            type: this.getMetricType(),
            value: Date.now() - this.navigationStart - this.inactivityAggregatedTime
        };
    };
    return AbstractActivityMetric;
}());
exports.AbstractActivityMetric = AbstractActivityMetric;

},{}],17:[function(require,module,exports){
"use strict";
var AbstractEventRule = (function () {
    function AbstractEventRule() {
    }
    AbstractEventRule.prototype.registerNotification = function (callback) {
        this.callback = callback;
        return this;
    };
    AbstractEventRule.prototype.notify = function () {
        this.callback();
    };
    return AbstractEventRule;
}());
exports.AbstractEventRule = AbstractEventRule;

},{}],18:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractMetric_1 = require("./AbstractMetric");
var AbstractIdentificationMetric = (function (_super) {
    __extends(AbstractIdentificationMetric, _super);
    function AbstractIdentificationMetric(identificationService) {
        _super.call(this, true, false);
        this.identification = identificationService.getIdentification();
    }
    return AbstractIdentificationMetric;
}(AbstractMetric_1.AbstractMetric));
exports.AbstractIdentificationMetric = AbstractIdentificationMetric;

},{"./AbstractMetric":20}],19:[function(require,module,exports){
"use strict";
var AbstractInactivityMetric = (function () {
    function AbstractInactivityMetric(timing) {
        this.isLast = false;
        this.oneTime = false;
        this.minInactivityValue = Math.pow(2, 53) - 1; // Max js number (needed for the first inactivity occurance)
        this.navigationStart = timing.navigationStart;
        this.inactivityCounter = this.inactivitySum = this.minInactivityValue = this.maxInactivityValue = 0;
    }
    AbstractInactivityMetric.prototype.calculateInactivity = function (currentTime) {
        if ((Date.now() - this.navigationStart) < 500) {
            return;
        }
        this.inactivityCounter++;
        this.lastActivityTime = currentTime;
        this.inactivitySum = this.inactivitySum + this.lastActivityTime;
        this.minInactivityValue = Math.min(this.lastActivityTime, this.minInactivityValue);
        this.maxInactivityValue = Math.max(this.lastActivityTime, this.maxInactivityValue);
    };
    AbstractInactivityMetric.prototype.getMetric = function () {
        return {
            type: this.getMetricType(),
            value: {
                sum: this.inactivitySum,
                max: this.maxInactivityValue,
                min: this.minInactivityValue,
                count: this.inactivityCounter
            }
        };
    };
    return AbstractInactivityMetric;
}());
exports.AbstractInactivityMetric = AbstractInactivityMetric;

},{}],20:[function(require,module,exports){
"use strict";
var AbstractMetric = (function () {
    function AbstractMetric(isLast, oneTime) {
        if (isLast === void 0) { isLast = false; }
        if (oneTime === void 0) { oneTime = true; }
        this.isLast = isLast;
        this.oneTime = oneTime;
    }
    AbstractMetric.prototype.getMetric = function () {
        return {
            type: this.type,
            value: this.getMetricValue()
        };
    };
    return AbstractMetric;
}());
exports.AbstractMetric = AbstractMetric;

},{}],21:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractInactivityMetric_1 = require("./AbstractInactivityMetric");
var AttentionMetric = (function (_super) {
    __extends(AttentionMetric, _super);
    function AttentionMetric(timing) {
        _super.call(this, timing);
    }
    AttentionMetric.prototype.getMetricType = function () {
        return MetricType_1.MetricType.attention;
    };
    return AttentionMetric;
}(AbstractInactivityMetric_1.AbstractInactivityMetric));
exports.AttentionMetric = AttentionMetric;

},{"./AbstractInactivityMetric":19,"./MetricType":35}],22:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var BrowserMetric = (function (_super) {
    __extends(BrowserMetric, _super);
    function BrowserMetric(userAgentService) {
        _super.call(this);
        this.type = MetricType_1.MetricType.browser;
        this.userAgent = userAgentService.userAgent;
    }
    BrowserMetric.prototype.getMetricValue = function () {
        return this.userAgent.browser.name;
    };
    return BrowserMetric;
}(AbstractMetric_1.AbstractMetric));
exports.BrowserMetric = BrowserMetric;

},{"./AbstractMetric":20,"./MetricType":35}],23:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var BrowserVersionMetric = (function (_super) {
    __extends(BrowserVersionMetric, _super);
    function BrowserVersionMetric(userAgentService) {
        _super.call(this);
        this.type = MetricType_1.MetricType.browserVersion;
        this.userAgent = userAgentService.userAgent;
    }
    BrowserVersionMetric.prototype.getMetricValue = function () {
        return this.userAgent.browser.version;
    };
    return BrowserVersionMetric;
}(AbstractMetric_1.AbstractMetric));
exports.BrowserVersionMetric = BrowserVersionMetric;

},{"./AbstractMetric":20,"./MetricType":35}],24:[function(require,module,exports){
"use strict";
var CompositeInactivity = (function () {
    function CompositeInactivity(hub, lackOfInterestMetric, attentionMetric) {
        this.hub = hub;
        this.lackOfInterestMetric = lackOfInterestMetric;
        this.attentionMetric = attentionMetric;
        this.lastActivityDetectedTime = Date.now();
        this.hub.bind(hub.userEvents, this.onEventRaised.bind(this));
    }
    CompositeInactivity.prototype.onEventRaised = function (ev) {
        this.updateMetric();
    };
    CompositeInactivity.prototype.updateMetric = function () {
        var now = Date.now();
        var activityDetectedTimeDiff = now - this.lastActivityDetectedTime;
        if (activityDetectedTimeDiff <= 1000) {
            this.lackOfInterestMetric.calculateInactivity(activityDetectedTimeDiff);
        }
        else if (activityDetectedTimeDiff > 1000 && activityDetectedTimeDiff < 5000) {
            this.attentionMetric.calculateInactivity(activityDetectedTimeDiff);
        }
        this.lastActivityDetectedTime = now;
    };
    return CompositeInactivity;
}());
exports.CompositeInactivity = CompositeInactivity;

},{}],25:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var DOMLContentLoadedTimeMetric = (function (_super) {
    __extends(DOMLContentLoadedTimeMetric, _super);
    function DOMLContentLoadedTimeMetric(timing) {
        _super.call(this);
        this.timing = timing;
        this.isLast = false;
        this.oneTime = true;
        this.type = MetricType_1.MetricType.domContentLoaded;
    }
    DOMLContentLoadedTimeMetric.prototype.getMetricValue = function () {
        return this.timing.domContentLoadedEventEnd - this.timing.navigationStart;
    };
    return DOMLContentLoadedTimeMetric;
}(AbstractMetric_1.AbstractMetric));
exports.DOMLContentLoadedTimeMetric = DOMLContentLoadedTimeMetric;

},{"./AbstractMetric":20,"./MetricType":35}],26:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var DocumentReferrerMetric = (function (_super) {
    __extends(DocumentReferrerMetric, _super);
    function DocumentReferrerMetric() {
        _super.apply(this, arguments);
        this.type = MetricType_1.MetricType.documentReferrer;
    }
    DocumentReferrerMetric.prototype.getMetricValue = function () {
        return document.referrer;
    };
    return DocumentReferrerMetric;
}(AbstractMetric_1.AbstractMetric));
exports.DocumentReferrerMetric = DocumentReferrerMetric;

},{"./AbstractMetric":20,"./MetricType":35}],27:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractActivityMetric_1 = require("./AbstractActivityMetric");
var EngagementTimeAggregatorMetric = (function (_super) {
    __extends(EngagementTimeAggregatorMetric, _super);
    function EngagementTimeAggregatorMetric(hub, config, timing) {
        _super.call(this, timing);
        this.hub = hub;
        this.config = config;
        this.intervalId = 0;
        this.hub.bind(hub.userEvents, this.onEventRaised.bind(this));
        this.guardInactivityTime();
    }
    EngagementTimeAggregatorMetric.prototype.getMetricType = function () {
        return MetricType_1.MetricType.engagementTime;
    };
    EngagementTimeAggregatorMetric.prototype.guardInactivityTime = function () {
        var _this = this;
        clearTimeout(this.intervalId);
        this.intervalId = setTimeout(function () {
            _this.markInactivity();
        }, this.config.metrics.inactivityTime);
    };
    EngagementTimeAggregatorMetric.prototype.onEventRaised = function (ev) {
        this.markActivity();
        this.guardInactivityTime();
    };
    EngagementTimeAggregatorMetric.prototype.dispose = function (shutdown) {
        clearTimeout(this.intervalId);
    };
    return EngagementTimeAggregatorMetric;
}(AbstractActivityMetric_1.AbstractActivityMetric));
exports.EngagementTimeAggregatorMetric = EngagementTimeAggregatorMetric;

},{"./AbstractActivityMetric":16,"./MetricType":35}],28:[function(require,module,exports){
"use strict";
var MetricType_1 = require("./MetricType");
var EventIdsMetric = (function () {
    function EventIdsMetric() {
        this.isLast = false;
        this.oneTime = false;
        this.eventsArray = [];
    }
    EventIdsMetric.prototype.addEvent = function (eventId) {
        if (this.eventsArray.indexOf(eventId) === -1) {
            this.eventsArray.push(eventId);
        }
    };
    EventIdsMetric.prototype.getMetric = function () {
        return {
            value: this.eventsArray,
            type: MetricType_1.MetricType.eventIds
        };
    };
    return EventIdsMetric;
}());
exports.EventIdsMetric = EventIdsMetric;

},{"./MetricType":35}],29:[function(require,module,exports){
"use strict";
var MetricType_1 = require("./MetricType");
var IdMetric = (function () {
    function IdMetric(id) {
        this.id = id;
        this.isLast = true;
        this.oneTime = false;
    }
    IdMetric.prototype.getMetric = function () {
        return {
            value: this.id,
            type: MetricType_1.MetricType.messageId
        };
    };
    return IdMetric;
}());
exports.IdMetric = IdMetric;

},{"./MetricType":35}],30:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var IsNewVisitorMetric = (function (_super) {
    __extends(IsNewVisitorMetric, _super);
    function IsNewVisitorMetric(identificationService) {
        _super.call(this);
        this.identificationService = identificationService;
        this.type = MetricType_1.MetricType.isNewVisitor;
    }
    IsNewVisitorMetric.prototype.getMetricValue = function () {
        return this.identificationService.isNewIdentification;
    };
    return IsNewVisitorMetric;
}(AbstractMetric_1.AbstractMetric));
exports.IsNewVisitorMetric = IsNewVisitorMetric;

},{"./AbstractMetric":20,"./MetricType":35}],31:[function(require,module,exports){
"use strict";
var MetricType_1 = require("./MetricType");
var EventType_1 = require("../eventHubs/EventType");
var JSErrorCountMetric = (function () {
    function JSErrorCountMetric(hub) {
        this.hub = hub;
        this.isLast = false;
        this.oneTime = false;
        this.jsErrorCounter = 0;
        this.hub.bind([EventType_1.EventType.error], this.onEventRaised.bind(this));
    }
    JSErrorCountMetric.prototype.onEventRaised = function (ev) {
        this.jsErrorCounter++;
    };
    JSErrorCountMetric.prototype.getMetric = function () {
        return {
            value: this.jsErrorCounter,
            type: MetricType_1.MetricType.jsErrorCount
        };
    };
    return JSErrorCountMetric;
}());
exports.JSErrorCountMetric = JSErrorCountMetric;

},{"../eventHubs/EventType":7,"./MetricType":35}],32:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractInactivityMetric_1 = require("./AbstractInactivityMetric");
var LackOfInterestMetric = (function (_super) {
    __extends(LackOfInterestMetric, _super);
    function LackOfInterestMetric(timing) {
        _super.call(this, timing);
    }
    LackOfInterestMetric.prototype.getMetricType = function () {
        return MetricType_1.MetricType.lackOfInterest;
    };
    return LackOfInterestMetric;
}(AbstractInactivityMetric_1.AbstractInactivityMetric));
exports.LackOfInterestMetric = LackOfInterestMetric;

},{"./AbstractInactivityMetric":19,"./MetricType":35}],33:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var LocationMetric = (function (_super) {
    __extends(LocationMetric, _super);
    function LocationMetric() {
        _super.apply(this, arguments);
        this.type = MetricType_1.MetricType.location;
    }
    LocationMetric.prototype.getMetricValue = function () {
        return location.href;
    };
    return LocationMetric;
}(AbstractMetric_1.AbstractMetric));
exports.LocationMetric = LocationMetric;

},{"./AbstractMetric":20,"./MetricType":35}],34:[function(require,module,exports){
"use strict";
var EventType_1 = require("../eventHubs/EventType");
var MetricAggregator = (function () {
    function MetricAggregator(metrics, hub, config, idMetricFactory, serializableFactory) {
        var _this = this;
        this.metrics = metrics;
        this.config = config;
        this.idMetricFactory = idMetricFactory;
        this.serializableFactory = serializableFactory;
        this.reliable = true;
        this.metricCounter = 0;
        this.messageType = 0 /* start */;
        this.serilaizer = serializableFactory.getSerializer();
        hub.bindTop([EventType_1.EventType.beforeunload, EventType_1.EventType.unload], function () {
            _this.terminate();
        });
    }
    MetricAggregator.prototype.terminate = function () {
        this.messageType = 2 /* end */;
        this.serilaizer = this.serializableFactory.getSerializer();
        this.metrics = this.metrics.filter(function (metric) { return metric.isLast; });
    };
    MetricAggregator.prototype.getMetrics = function () {
        var id = this.getMetricId();
        var metrics;
        var idMetric = this.idMetricFactory(id);
        metrics = this.metrics.concat([idMetric]);
        return {
            id: id,
            type: this.messageType,
            reliable: this.reliable,
            metrics: this.serilaizer.serialize(metrics.map(function (metric) { return metric.getMetric(); }))
        };
    };
    MetricAggregator.prototype.resolveMetrics = function (metricsIdentifier) {
        if (metricsIdentifier.reliable) {
            this.reliable = false;
            this.messageType = 1 /* chunk */;
            this.metrics = this.metrics.filter(function (metric) { return !metric.oneTime; });
        }
    };
    MetricAggregator.prototype.getMetricId = function () {
        return this.reliable ? this.metricCounter : ++this.metricCounter;
    };
    return MetricAggregator;
}());
exports.MetricAggregator = MetricAggregator;

},{"../eventHubs/EventType":7}],35:[function(require,module,exports){
"use strict";
var MetricType;
(function (MetricType) {
    MetricType[MetricType["visitId"] = 3] = "visitId";
    MetricType[MetricType["version"] = 6] = "version";
    MetricType[MetricType["screenX"] = 16] = "screenX";
    MetricType[MetricType["screenY"] = 17] = "screenY";
    MetricType[MetricType["browser"] = 18] = "browser";
    MetricType[MetricType["location"] = 7] = "location";
    MetricType[MetricType["visitorId"] = 2] = "visitorId";
    MetricType[MetricType["projectId"] = 1] = "projectId";
    MetricType[MetricType["messageId"] = 5] = "messageId";
    MetricType[MetricType["eventIds"] = 21] = "eventIds";
    MetricType[MetricType["pageviewId"] = 4] = "pageviewId";
    MetricType[MetricType["timestamp"] = 31] = "timestamp";
    MetricType[MetricType["attention"] = 32] = "attention";
    MetricType[MetricType["timeOnPage"] = 12] = "timeOnPage";
    MetricType[MetricType["numOfClicks"] = 14] = "numOfClicks";
    MetricType[MetricType["scrollReach"] = 13] = "scrollReach";
    MetricType[MetricType["jsErrorCount"] = 11] = "jsErrorCount";
    MetricType[MetricType["isNewVisitor"] = 20] = "isNewVisitor";
    MetricType[MetricType["engagementTime"] = 9] = "engagementTime";
    MetricType[MetricType["lackOfInterest"] = 30] = "lackOfInterest";
    MetricType[MetricType["browserVersion"] = 19] = "browserVersion";
    MetricType[MetricType["documentReferrer"] = 8] = "documentReferrer";
    MetricType[MetricType["domContentLoaded"] = 10] = "domContentLoaded";
    MetricType[MetricType["durationSinceLastVisit"] = 15] = "durationSinceLastVisit";
})(MetricType || (MetricType = {}));
exports.MetricType = MetricType;

},{}],36:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractEventRule_1 = require("./AbstractEventRule");
var MetricsPromise = (function (_super) {
    __extends(MetricsPromise, _super);
    function MetricsPromise(metricsAggregator) {
        _super.call(this);
        this.metricsAggregator = metricsAggregator;
        this.started = false;
    }
    MetricsPromise.prototype.resolve = function (metricsIdentifier) {
        this.metricsAggregator.resolveMetrics(metricsIdentifier);
    };
    MetricsPromise.prototype.reject = function (metricsIdentifier) {
        if (metricsIdentifier.reliable && this.started) {
            this.notify();
        }
    };
    MetricsPromise.prototype.start = function () {
        this.started = true;
    };
    MetricsPromise.prototype.stop = function () {
        this.started = false;
    };
    return MetricsPromise;
}(AbstractEventRule_1.AbstractEventRule));
exports.MetricsPromise = MetricsPromise;

},{"./AbstractEventRule":17}],37:[function(require,module,exports){
"use strict";
var EventType_1 = require("../eventHubs/EventType");
var MetricsReader = (function () {
    function MetricsReader(notificationRules, hub, metricsAggregator, processor, promise, identificationService) {
        var _this = this;
        this.notificationRules = notificationRules;
        this.hub = hub;
        this.metricsAggregator = metricsAggregator;
        this.processor = processor;
        this.promise = promise;
        this.identificationService = identificationService;
        notificationRules.forEach(function (rule) { return rule.registerNotification(_this.read.bind(_this)).start(); });
        this.hub.bind([EventType_1.EventType.online, EventType_1.EventType.offline], function () {
            _this.applyOnNotificationRules(function (rule) { return navigator.onLine ? rule.start() : rule.stop(); });
        });
    }
    MetricsReader.prototype.read = function () {
        var metricsResult = this.metricsAggregator.getMetrics();
        if (metricsResult.isEmpty) {
            return;
        }
        this.identificationService.modifyIdentification();
        this.processor.process(metricsResult.metrics, {
            id: metricsResult.id,
            promise: this.promise,
            type: metricsResult.type,
            reliable: metricsResult.reliable
        });
    };
    MetricsReader.prototype.dispose = function (shutdown) {
        if (!shutdown) {
            this.read();
        }
        this.applyOnNotificationRules(function (rule) { return rule.stop(); });
    };
    MetricsReader.prototype.applyOnNotificationRules = function (apply) {
        this.notificationRules.forEach(function (rule) { return apply(rule); });
    };
    return MetricsReader;
}());
exports.MetricsReader = MetricsReader;

},{"../eventHubs/EventType":7}],38:[function(require,module,exports){
"use strict";
var MetricType_1 = require("./MetricType");
var EventType_1 = require("../EventHubs/EventType");
var NumberOfClicksMetric = (function () {
    function NumberOfClicksMetric(hub) {
        this.hub = hub;
        this.isLast = false;
        this.oneTime = false;
        this.clicksCounter = 0;
        this.hub.bind([EventType_1.EventType.mouseup], this.onMouseUpEventRaised.bind(this));
        this.hub.bind([EventType_1.EventType.mousedown], this.onMouseDownEventRaised.bind(this));
    }
    NumberOfClicksMetric.prototype.onMouseDownEventRaised = function (ev) {
        this.mouseDownEventTarget = ev.target;
    };
    NumberOfClicksMetric.prototype.onMouseUpEventRaised = function (ev) {
        if (this.mouseDownEventTarget === ev.target) {
            this.clicksCounter++;
        }
    };
    NumberOfClicksMetric.prototype.getMetric = function () {
        return {
            value: this.clicksCounter,
            type: MetricType_1.MetricType.numOfClicks
        };
    };
    return NumberOfClicksMetric;
}());
exports.NumberOfClicksMetric = NumberOfClicksMetric;

},{"../EventHubs/EventType":3,"./MetricType":35}],39:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractIdentificationMetric_1 = require("./AbstractIdentificationMetric");
var PageViewIdentificationMetric = (function (_super) {
    __extends(PageViewIdentificationMetric, _super);
    function PageViewIdentificationMetric(identificationService) {
        _super.call(this, identificationService);
        this.type = MetricType_1.MetricType.pageviewId;
    }
    PageViewIdentificationMetric.prototype.getMetricValue = function () {
        return this.identification.PageView;
    };
    return PageViewIdentificationMetric;
}(AbstractIdentificationMetric_1.AbstractIdentificationMetric));
exports.PageViewIdentificationMetric = PageViewIdentificationMetric;

},{"./AbstractIdentificationMetric":18,"./MetricType":35}],40:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractEventRule_1 = require("./AbstractEventRule");
var PeriodicalNotifierRule = (function (_super) {
    __extends(PeriodicalNotifierRule, _super);
    function PeriodicalNotifierRule(config) {
        _super.call(this);
        this.config = config;
        this.firstFibNumber = 0;
        this.secondFibNumber = 1;
        this.maxIntervalReached = false;
        this.maxFetchInterval = this.config.metrics.maxFetchInterval;
    }
    PeriodicalNotifierRule.prototype.start = function () {
        var _this = this;
        var interval = this.maxIntervalReached ? this.maxFetchInterval : this.getFetchInterval();
        this.timeoutId = setTimeout(function () {
            _this.notify();
            _this.start();
        }, interval);
    };
    PeriodicalNotifierRule.prototype.stop = function () {
        clearInterval(this.timeoutId);
    };
    PeriodicalNotifierRule.prototype.dispose = function (shutdown) {
        this.stop();
    };
    PeriodicalNotifierRule.prototype.getFetchInterval = function () {
        var fibNumber = this.firstFibNumber + this.secondFibNumber;
        var interval = fibNumber * 1000;
        if (interval > this.maxFetchInterval) {
            this.maxIntervalReached = true;
            return this.maxFetchInterval;
        }
        this.firstFibNumber = this.secondFibNumber;
        this.secondFibNumber = fibNumber;
        return interval;
    };
    return PeriodicalNotifierRule;
}(AbstractEventRule_1.AbstractEventRule));
exports.PeriodicalNotifierRule = PeriodicalNotifierRule;

},{"./AbstractEventRule":17}],41:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var ProjectIdMetric = (function (_super) {
    __extends(ProjectIdMetric, _super);
    function ProjectIdMetric(projectId) {
        _super.call(this, true, false);
        this.projectId = projectId;
        this.type = MetricType_1.MetricType.projectId;
    }
    ProjectIdMetric.prototype.getMetricValue = function () {
        return this.projectId;
    };
    return ProjectIdMetric;
}(AbstractMetric_1.AbstractMetric));
exports.ProjectIdMetric = ProjectIdMetric;

},{"./AbstractMetric":20,"./MetricType":35}],42:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var ResolutionHeightMetric = (function (_super) {
    __extends(ResolutionHeightMetric, _super);
    function ResolutionHeightMetric() {
        _super.apply(this, arguments);
        this.type = MetricType_1.MetricType.screenY;
    }
    ResolutionHeightMetric.prototype.getMetricValue = function () {
        return window.innerHeight;
    };
    return ResolutionHeightMetric;
}(AbstractMetric_1.AbstractMetric));
exports.ResolutionHeightMetric = ResolutionHeightMetric;

},{"./AbstractMetric":20,"./MetricType":35}],43:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var ResolutionWidthMetric = (function (_super) {
    __extends(ResolutionWidthMetric, _super);
    function ResolutionWidthMetric() {
        _super.apply(this, arguments);
        this.type = MetricType_1.MetricType.screenX;
    }
    ResolutionWidthMetric.prototype.getMetricValue = function () {
        return window.innerWidth;
    };
    return ResolutionWidthMetric;
}(AbstractMetric_1.AbstractMetric));
exports.ResolutionWidthMetric = ResolutionWidthMetric;

},{"./AbstractMetric":20,"./MetricType":35}],44:[function(require,module,exports){
"use strict";
var MetricType_1 = require("./MetricType");
var EventType_1 = require("../eventHubs/EventType");
var ScrollReachMetric = (function () {
    function ScrollReachMetric(hub) {
        this.hub = hub;
        this.isLast = false;
        this.oneTime = false;
        this.bindedOnEventRaised = this.onEventRaised.bind(this);
        this.maxScrollReach = 0;
        this.hub.bind([EventType_1.EventType.scroll, EventType_1.EventType.resize], this.bindedOnEventRaised);
    }
    ScrollReachMetric.prototype.onEventRaised = function (ev) {
        var clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
        var scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;
        var scrollReach = scrollTop / (scrollHeight - clientHeight) * 100;
        scrollReach = Math.abs(Math.round(Math.min(100, scrollReach)));
        this.maxScrollReach = Math.max(scrollReach, this.maxScrollReach);
        if (this.maxScrollReach === 100) {
            this.hub.unbind([EventType_1.EventType.scroll, EventType_1.EventType.resize], this.bindedOnEventRaised);
        }
    };
    ScrollReachMetric.prototype.getMetric = function () {
        return {
            value: this.maxScrollReach,
            type: MetricType_1.MetricType.scrollReach
        };
    };
    return ScrollReachMetric;
}());
exports.ScrollReachMetric = ScrollReachMetric;

},{"../eventHubs/EventType":7,"./MetricType":35}],45:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var EventType_1 = require("../eventHubs/EventType");
var AbstractActivityMetric_1 = require("./AbstractActivityMetric");
var TimeOnPageMetric = (function (_super) {
    __extends(TimeOnPageMetric, _super);
    function TimeOnPageMetric(hub, timing) {
        _super.call(this, timing);
        this.hub = hub;
        this.hub.bind([EventType_1.EventType.visibilitychange], this.onEventRaised.bind(this));
    }
    TimeOnPageMetric.prototype.getMetricType = function () {
        return MetricType_1.MetricType.timeOnPage;
    };
    TimeOnPageMetric.prototype.onEventRaised = function (ev) {
        if (document.hidden) {
            this.markInactivity();
        }
        else {
            this.markActivity();
        }
    };
    return TimeOnPageMetric;
}(AbstractActivityMetric_1.AbstractActivityMetric));
exports.TimeOnPageMetric = TimeOnPageMetric;

},{"../eventHubs/EventType":7,"./AbstractActivityMetric":16,"./MetricType":35}],46:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractMetric_1 = require("./AbstractMetric");
var VersionMetric = (function (_super) {
    __extends(VersionMetric, _super);
    function VersionMetric() {
        _super.apply(this, arguments);
        this.type = MetricType_1.MetricType.version;
    }
    VersionMetric.prototype.getMetricValue = function () {
        return 1;
    };
    return VersionMetric;
}(AbstractMetric_1.AbstractMetric));
exports.VersionMetric = VersionMetric;

},{"./AbstractMetric":20,"./MetricType":35}],47:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractIdentificationMetric_1 = require("./AbstractIdentificationMetric");
var VisitIdentificationMetric = (function (_super) {
    __extends(VisitIdentificationMetric, _super);
    function VisitIdentificationMetric(identificationService) {
        _super.call(this, identificationService);
        this.type = MetricType_1.MetricType.visitId;
    }
    VisitIdentificationMetric.prototype.getMetricValue = function () {
        return this.identification.Visit;
    };
    return VisitIdentificationMetric;
}(AbstractIdentificationMetric_1.AbstractIdentificationMetric));
exports.VisitIdentificationMetric = VisitIdentificationMetric;

},{"./AbstractIdentificationMetric":18,"./MetricType":35}],48:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MetricType_1 = require("./MetricType");
var AbstractIdentificationMetric_1 = require("./AbstractIdentificationMetric");
var VisitorIdentificationMetric = (function (_super) {
    __extends(VisitorIdentificationMetric, _super);
    function VisitorIdentificationMetric(identificationService) {
        _super.call(this, identificationService);
        this.type = MetricType_1.MetricType.visitorId;
    }
    VisitorIdentificationMetric.prototype.getMetricValue = function () {
        return this.identification.Visitor;
    };
    return VisitorIdentificationMetric;
}(AbstractIdentificationMetric_1.AbstractIdentificationMetric));
exports.VisitorIdentificationMetric = VisitorIdentificationMetric;

},{"./AbstractIdentificationMetric":18,"./MetricType":35}],49:[function(require,module,exports){
"use strict";
var CookiesService = (function () {
    function CookiesService() {
    }
    CookiesService.prototype.delete = function (cookie) {
        this.write(cookie, "", -1);
    };
    CookiesService.prototype.read = function (cookie) {
        var to = 0;
        var from = 0;
        var tuples = document.cookie.split(";");
        cookie += "=";
        for (var _i = 0, tuples_1 = tuples; _i < tuples_1.length; _i++) {
            var keyValue = tuples_1[_i];
            if (keyValue.trim().indexOf(cookie) === 0) {
                to = from + keyValue.length;
                from = from + keyValue.split("=")[0].length + 1;
                return document.cookie.substring(from, to);
            }
            from += keyValue.length + 1;
        }
        return null;
    };
    CookiesService.prototype.write = function (cookie, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 86400000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = cookie + "=" + value + expires + "; path=/;";
    };
    return CookiesService;
}());
exports.CookiesService = CookiesService;

},{}],50:[function(require,module,exports){
"use strict";
var EventType_1 = require("../../eventHubs/EventType");
var Disposer = (function () {
    function Disposer(hub, container, config, app) {
        var _this = this;
        this.container = container;
        this.config = config;
        this.app = app;
        var bindedDispose = this.dispose.bind(this);
        this.transportChannel = config.transport.mainChannel;
        setTimeout(bindedDispose, config.identification.visitTimeSpan);
        hub.bind([EventType_1.EventType.unload, EventType_1.EventType.beforeunload], function () { return _this.dispose(); });
        this.channelFactory = this.resolveChannel(this.transportChannel);
    }
    Disposer.prototype.resolveChannel = function (channelType) {
        return this.container.resolveFactory(channelType + " channel");
    };
    Disposer.prototype.getSerializer = function () {
        return this.container.resolve(this.transportChannel + " serializer");
    };
    Disposer.prototype.getChannel = function (channelSettings) {
        return this.channelFactory(channelSettings);
    };
    Disposer.prototype.dispose = function (shutdown) {
        this.transportChannel = this.config.transport.terminalChannel;
        this.metricAggregator.terminate();
        this.channelFactory = this.resolveChannel(this.transportChannel);
        this.container.dispose(shutdown);
        this.app.stop();
    };
    Disposer.prototype.shutdown = function () {
        this.dispose(true);
    };
    return Disposer;
}());
exports.Disposer = Disposer;

},{"../../eventHubs/EventType":7}],51:[function(require,module,exports){
"use strict";
var IdGenerator = (function () {
    function IdGenerator() {
    }
    IdGenerator.prototype.generate = function () {
        return Math.floor(Math.random() * IdGenerator.maxNumber);
    };
    IdGenerator.maxNumber = Math.pow(2, 53) - 1;
    return IdGenerator;
}());
exports.IdGenerator = IdGenerator;

},{}],52:[function(require,module,exports){
"use strict";
var ObjectExtender_1 = require("../objectExtender/ObjectExtender");
var IdentificationService = (function () {
    function IdentificationService(idGenerator, cookiesService, config) {
        this.idGenerator = idGenerator;
        this.cookiesService = cookiesService;
        this.config = config;
        this.cookie = "ctm";
        this.isNewIdentification = false;
        this.setOrAddIdentification();
    }
    IdentificationService.prototype.setOrAddIdentification = function () {
        var _this = this;
        var isIdentified = false;
        var subject = this.parseIdentification();
        if (subject) {
            isIdentified = this.persistIdentification(subject, function (s) {
                if (!_this.isInVisitRange(subject)) {
                    subject.vst = _this.idGenerator.generate();
                }
                subject.pgv = _this.idGenerator.generate();
                subject.intr = Date.parse(new Date().toUTCString());
                return subject;
            });
        }
        if (!isIdentified) {
            this.createIdentification();
        }
        this.setIdentificationFromStored();
    };
    IdentificationService.prototype.parseIdentification = function () {
        var ctm = this.cookiesService.read("ctm");
        if (ctm) {
            try {
                return JSON.parse(ctm);
            }
            catch (e) { }
        }
        return null;
    };
    IdentificationService.prototype.setIdentificationFromStored = function () {
        this.identification = {
            Visit: this.storedIdentification.vst,
            Visitor: this.storedIdentification.vstr,
            PageView: this.storedIdentification.pgv,
            LastModified: this.storedIdentification.intr
        };
    };
    IdentificationService.prototype.getIdentification = function () {
        return this.identification;
    };
    IdentificationService.prototype.persistIdentification = function (subject, subjectTransform) {
        if (this.validate(subject)) {
            subject = subjectTransform ? subjectTransform(subject) : subject;
            this.updateCookie(subject);
            this.storedIdentification = subject;
            return true;
        }
        return false;
    };
    IdentificationService.prototype.isInVisitRange = function (identification) {
        return Date.parse(new Date().toUTCString()) - identification.intr < this.config.identification.visitTimeSpan;
    };
    IdentificationService.prototype.createIdentification = function () {
        this.updateCookie(this.storedIdentification = {
            pgv: this.idGenerator.generate(),
            vst: this.idGenerator.generate(),
            vstr: this.idGenerator.generate(),
            intr: Date.parse(new Date().toUTCString())
        });
        this.isNewIdentification = true;
    };
    IdentificationService.prototype.validate = function (identification) {
        return ["vst", "pgv", "vstr", "intr"].every(function (key) {
            var value;
            if (value = identification[key]) {
                return !isNaN(value);
            }
            return false;
        });
    };
    IdentificationService.prototype.modifyIdentification = function () {
        var now = Date.parse(new Date().toUTCString());
        this.storedIdentification.intr = this.identification.LastModified = now;
        this.updateCookie(this.storedIdentification);
    };
    IdentificationService.prototype.setIdentification = function (identification) {
        var subject = this.parseIdentification() || {};
        subject = ObjectExtender_1.ObjectExtender.extend(subject, identification);
        if (this.persistIdentification(subject)) {
            this.setIdentificationFromStored();
        }
    };
    IdentificationService.prototype.updateCookie = function (identification) {
        var value = JSON.stringify(identification);
        this.cookiesService.write(this.cookie, value, this.config.identification.expirationDays);
    };
    return IdentificationService;
}());
exports.IdentificationService = IdentificationService;

},{"../objectExtender/ObjectExtender":53}],53:[function(require,module,exports){
"use strict";
var ObjectExtender = (function () {
    function ObjectExtender() {
    }
    ObjectExtender.extend = function (target) {
        var length = arguments.length, options, name, src, copy, copyIsArray, clone;
        for (var i = 1; i < length; i++) {
            if (options = arguments[i]) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (copy && (ObjectExtender.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            target[name] = copy.slice();
                        }
                        else {
                            clone = src && ObjectExtender.isPlainObject(src) ? src : {};
                            target[name] = ObjectExtender.extend(clone, copy);
                        }
                    }
                    else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    ObjectExtender.isPlainObject = function (obj) {
        if (ObjectExtender.type(obj) !== "object" || obj.nodeType || obj === window) {
            return false;
        }
        if (obj.constructor && !ObjectExtender.hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
            return false;
        }
        // If the function hasn't returned already, we're confident that
        // |obj| is a plain object, created by {} or constructed with new Object
        return true;
    };
    ObjectExtender.type = function (obj) {
        if (obj == null) {
            return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ?
            ObjectExtender.class2type[ObjectExtender.toString.call(obj)] || "object" :
            typeof obj;
    };
    ObjectExtender.class2type = {};
    ObjectExtender.toString = ObjectExtender.class2type.toString;
    ObjectExtender.hasOwn = ObjectExtender.class2type.hasOwnProperty;
    return ObjectExtender;
}());
exports.ObjectExtender = ObjectExtender;

},{}],54:[function(require,module,exports){
"use strict";
var UserAgentService = (function () {
    function UserAgentService(userAgent) {
        this.tokenizer = / (\w+)(?:\/([\w\.]+))? (?:(\([^\)]+\)) )?/img;
        this.userAgent = this.detect(" " + (userAgent || navigator.userAgent) + " ");
        this.isBrowserSupported = this.checkBrowserSupport(this.userAgent.browser, this.userAgent.is);
    }
    UserAgentService.prototype.detect = function (userAgent) {
        var xhr = window.XMLHttpRequest;
        var tokens = this.tokenize(userAgent);
        var result = { is: { mobile: false }, browser: { version: 6 /* NotSupported */ } };
        var browser = result.browser;
        var mozExtra = tokens["Mozilla"] && tokens["Mozilla"]["extra"] ? tokens["Mozilla"]["extra"] : null;
        var supports = result.supports = {
            sendBeacon: !!navigator.sendBeacon,
            binaryTransport: xhr && "withCredentials" in new XMLHttpRequest
        };
        if (tokens["Opera"]) {
            browser.version = 0;
            browser.name = "Opera";
            browser.type = 1 /* Opera */;
            return result;
        }
        if (tokens["Edge"]) {
            browser.type = 0 /* Edge */;
            browser.name = "Edge";
            browser.version = parseInt(tokens["Edge"]["value"]);
            result.is.mobile = userAgent.indexOf("Windows Phone; ") !== -1;
            return result;
        }
        if (mozExtra) {
            var index = void 0;
            var msieIndex = mozExtra.indexOf("MSIE ");
            var tridentIndex = mozExtra.indexOf("; Trident/");
            var isIE = msieIndex + tridentIndex > -1;
            if (isIE) {
                index = msieIndex !== -1 ? msieIndex : mozExtra.indexOf("; rv:");
                if (index !== -1) {
                    browser.type = 7 /* InternetExplorer */;
                    browser.name = "Internet Explorer";
                    browser.version = parseFloat(mozExtra.substr(index + 5, 3));
                    result.is.mobile = mozExtra.indexOf("; Touch") !== -1 || mozExtra.indexOf("; IEMobile/") !== -1;
                    return result;
                }
            }
        }
        if (tokens["Firefox"] && tokens["Firefox"]["value"]) {
            browser.type = 5 /* FireFox */;
            browser.name = "Firefox";
            browser.version = parseFloat(tokens["Firefox"]["value"]);
            result.is.mobile = mozExtra && mozExtra.indexOf("Android; ") !== -1;
            return result;
        }
        if ((tokens["Chrome"] && tokens["Chrome"]["value"] || tokens["CriOS"] && tokens["CriOS"]["value"]) && !tokens["Version"]) {
            browser.type = 3 /* Chrome */;
            browser.name = "Chrome";
            browser.version = parseFloat(tokens["Chrome"] ? tokens["Chrome"]["value"] : tokens["CriOS"]["value"]);
            result.is.mobile = tokens["CriOS"] || mozExtra && mozExtra.indexOf("; Android ") !== -1;
            return result;
        }
        if (tokens["Safari"]) {
            browser.name = "Safari";
            if (mozExtra && mozExtra.indexOf("; Android ") !== -1 && tokens["AppleWebKit"] && tokens["AppleWebKit"]["value"]) {
                browser.type = 2 /* WebKit */;
                browser.version = parseFloat(tokens["AppleWebKit"]["value"]);
                result.is.mobile = true;
                return result;
            }
            if (mozExtra && mozExtra.indexOf("Windows") === -1 && tokens["Version"] && tokens["Version"]["value"]) {
                browser.type = 4 /* Safari */;
                browser.version = parseFloat(tokens["Version"]["value"]);
                result.is.mobile = !!tokens["Mobile"];
            }
        }
        return result;
    };
    UserAgentService.prototype.checkBrowserSupport = function (browser, device) {
        return browser.type === 0 /* Edge */ && !device.mobile ||
            browser.type === 3 /* Chrome */ && browser.version >= 9 ||
            browser.type === 2 /* WebKit */ && browser.version >= 534 ||
            browser.type === 5 /* FireFox */ && browser.version >= 25 && !device.mobile ||
            browser.type === 4 /* Safari */ && browser.version >= 5.1 && browser.version <= 10 ||
            browser.type === 7 /* InternetExplorer */ && browser.version > 9 && !device.mobile;
    };
    UserAgentService.prototype.tokenize = function (userAgent) {
        var tokens = {};
        var token;
        while (token = this.tokenizer.exec(userAgent)) {
            tokens[token[1]] = {
                value: token[2],
                extra: token[3]
            };
            this.tokenizer.lastIndex--;
        }
        return tokens;
    };
    return UserAgentService;
}());
exports.UserAgentService = UserAgentService;

},{}],55:[function(require,module,exports){
"use strict";
var AbstractTransportChannel = (function () {
    function AbstractTransportChannel(settings) {
        this.settings = settings;
    }
    AbstractTransportChannel.prototype.onRequestSuccess = function (envelope) {
        this.reset();
        this.settings.sendPromise.resolve(envelope);
    };
    AbstractTransportChannel.prototype.onRequestFailure = function (envelope) {
        var _this = this;
        this.reset();
        setTimeout(function () {
            _this.settings.sendPromise.reject(envelope);
        }, this.settings.waitInterval);
    };
    return AbstractTransportChannel;
}());
exports.AbstractTransportChannel = AbstractTransportChannel;

},{}],56:[function(require,module,exports){
"use strict";
var BeaconTransportChannel = (function () {
    function BeaconTransportChannel(settings) {
        this.settings = settings;
    }
    BeaconTransportChannel.prototype.send = function (url, envelope) {
        var data = envelope.message.data;
        if (navigator.sendBeacon(url + "&" + data)) {
            this.settings.sendPromise.resolve(envelope);
        }
        else {
            this.settings.sendPromise.reject(envelope);
        }
    };
    return BeaconTransportChannel;
}());
exports.BeaconTransportChannel = BeaconTransportChannel;

},{}],57:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractTransportChannel_1 = require("./AbstractTransportChannel");
var ImageTransportChannel = (function (_super) {
    __extends(ImageTransportChannel, _super);
    function ImageTransportChannel(settings) {
        _super.call(this, settings);
        this.image = new Image();
    }
    ImageTransportChannel.prototype.send = function (url, envelope) {
        var _this = this;
        var data = envelope.message.data;
        this.image.onload = function () {
            _this.onRequestSuccess(envelope);
        };
        this.image.onerror = function () {
            _this.onRequestFailure(envelope);
        };
        this.image.src += url + "&" + data + "&r=" + Date.now();
    };
    ImageTransportChannel.prototype.reset = function () {
        this.image = this.image.onerror = this.image.onload = null;
    };
    return ImageTransportChannel;
}(AbstractTransportChannel_1.AbstractTransportChannel));
exports.ImageTransportChannel = ImageTransportChannel;

},{"./AbstractTransportChannel":55}],58:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractTransportChannel_1 = require("./AbstractTransportChannel");
var TransportChannelXhr = (function (_super) {
    __extends(TransportChannelXhr, _super);
    function TransportChannelXhr(settings) {
        _super.call(this, settings);
        this.xhr = new XMLHttpRequest();
    }
    TransportChannelXhr.prototype.send = function (url, envelope) {
        var _this = this;
        var xhr = this.xhr;
        var data = envelope.message.data;
        try {
            xhr.open("POST", url);
            xhr.timeout = 30000;
            xhr.setRequestHeader("Content-Type", "text/plain");
            this.xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        _this.onRequestSuccess(envelope);
                    }
                    else {
                        _this.onRequestFailure(envelope);
                    }
                }
            };
            xhr.onload = function () {
                _this.onRequestSuccess(envelope);
            };
            xhr.onerror = xhr.ontimeout = xhr.onabort = function () {
                _this.onRequestFailure(envelope);
            };
            xhr.send(data);
        }
        catch (ex) {
            this.onRequestFailure(envelope);
        }
    };
    TransportChannelXhr.prototype.reset = function () {
        this.xhr = this.xhr.onabort = this.xhr.ontimeout = this.xhr.onerror = this.xhr.onload = this.xhr.onreadystatechange = null;
    };
    return TransportChannelXhr;
}(AbstractTransportChannel_1.AbstractTransportChannel));
exports.TransportChannelXhr = TransportChannelXhr;

},{"./AbstractTransportChannel":55}]},{},[2])(2)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
if (typeof window.ClickTaleMonitorOnReady === "function"){ ClickTaleMonitorOnReady(); } }();